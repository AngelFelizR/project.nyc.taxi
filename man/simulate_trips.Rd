% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_trips.R
\name{simulate_trips}
\alias{simulate_trips}
\title{Simulates a day of work}
\usage{
simulate_trips(
  arrow_con,
  start_datetime,
  start_zone,
  minutes_next_trip,
  end_datetime,
  valid_end_zones,
  closest_zone,
  borough_zones
)
}
\arguments{
\item{arrow_con}{a data.frame or arrow connection with trips to sample from, with the columns described below.}

\item{start_datetime}{a date with an associated time when the taxi driver start to work}

\item{start_zone}{a number to select to the starting zone}

\item{minutes_next_trip}{an integer to define the limit time needed before extending the filters}

\item{end_datetime}{a date with an associated time when the taxi driver stop looking for new trips}

\item{valid_end_zones}{a vector of number defining all possible zones to drive}

\item{closest_zone}{a named vector pointing the closest zone from the taxi driver is waiting for a need trip in order to start a trip}

\item{borough_zones}{a data.frame with the integer column LocationID with all possible zone ids and the list column id_list with contain all other zones ids related to the LocationID's borough}
}
\value{
A data.frame
}
\description{
This function sample from a data.frame or arrow connection all the trips needed
to complete the a working day form taxi driver.
}
\details{
\code{arrow_con} must has the following columns\tabular{ll}{
   "Column Name" \tab "class" \cr
   year \tab integer \cr
   month \tab integer \cr
   PULocationID \tab integer \cr
   DOLocationID \tab integer \cr
   request_datetime \tab POSIXct POSIXt \cr
   dropoff_datetime \tab POSIXct POSIXt \cr
   driver_pay \tab numeric \cr
   tips \tab numeric \cr
}
}
\examples{

# Defining some zone context
valid_zones <- 1:3
closest_zones <- c(2L, 1L, 2L)
names(closest_zones) <- valid_zones
borough_zones <- data.frame(
  LocationID = valid_zones,
  id_list = I(list(valid_zones, valid_zones, valid_zones))
)

# Defining start point
start_datetime <- lubridate::make_datetime(2023L, 5L, 18L, 8L)
start_zone <- 1L

# Let's check trips from at 3 levels
# 1. Starting in the same zone
# 2. Starting in the closest zone
# 3. Starting in the farthest zone
valid_trips <- data.frame(
  year = 2023L,
  month = 5L,
  PULocationID = c(1L, 2L, 3L),
  DOLocationID = c(3L, 1L, 1L),
  request_datetime = c(
   start_datetime + lubridate::minutes(2L),
   start_datetime + lubridate::minutes(20L + 7L),
   start_datetime + lubridate::minutes(37L + 14L)
  ),
  dropoff_datetime = c(
   start_datetime + lubridate::minutes(20L),
   start_datetime + lubridate::minutes(37L),
   lubridate::make_datetime(2023L, 5L, 18L, 9L, 1L)
  ),
  driver_pay = 10,
  tips = 2 
)

simulate_trips(valid_trips,
               start_datetime = start_datetime,
               start_zone = start_zone,
               minutes_next_trip = 6L,
               end_datetime = start_datetime + lubridate::hours(1L),
               valid_end_zones = valid_zones,
               closest_zone = closest_zones,
               borough_zones = borough_zones)

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_trips.R
\name{simulate_trips}
\alias{simulate_trips}
\title{Simulates a day of work}
\usage{
simulate_trips(
  arrow_con,
  start_datetime,
  start_zone,
  minutes_next_trip,
  end_datetime,
  valid_end_zones,
  closest_zone,
  borough_zones
)
}
\arguments{
\item{arrow_con}{an arrow connection with trips to sample from}

\item{start_datetime}{a date with an associated time when the taxi driver start to work}

\item{start_zone}{a number to select to the starting zone}

\item{minutes_next_trip}{an integer to define the limit time needed before extending the filters}

\item{end_datetime}{a date with an associated time when the taxi driver stop looking for new trips}

\item{valid_end_zones}{a vector of number defining all possible zones to drive}

\item{closest_zone}{a named vector pointing the closest zone from the taxi driver is waiting for a need trip in order to start a trip}

\item{borough_zones}{a data.frame with the integer column LocationID with all possible zone ids and the list column id_list with contain all other zones ids related to the LocationID's borough}
}
\value{
A data.frame
}
\description{
This function sample from a data.frame or arrow connection all the trips needed
to complete the a working day form taxi driver.
}
\examples{

# Let's defining 3 zones
valid_zones <- 1:3

# Then define the closest zone to each zone
closest_zones <- c(2L, 1L, 2L)
names(closest_zones) <- valid_zones

# All the zones are from the same borough
borough_zones <- data.frame(
  LocationID = valid_zones,
  id_list = I(list(valid_zones, valid_zones, valid_zones))
)

start_datetime <- lubridate::make_datetime(2023L, 5L, 18L, 8L)
start_zone <- 1L

ArrowDf <- data.frame(
  year = 2023L,
  month = 5L,
  PULocationID = c(
    
  # Let's simulate a trip in starting zone
  1L,
  
  # Then we can start in the closest zone
  2L,
  
  # Finally we can take a trip at borough level
  3L
  ),
  
  DOLocationID = c(3L, 1L, 1L),
  
  request_datetime = c(
   start_datetime + lubridate::minutes(2L),
   start_datetime + lubridate::minutes(20L + 7L),
   start_datetime + lubridate::minutes(37L + 14L)
  ),
  dropoff_datetime = c(
   start_datetime + lubridate::minutes(20L),
   start_datetime + lubridate::minutes(37L),
   lubridate::make_datetime(2023L, 5L, 18L, 9L, 1L)
  ),
  driver_pay = 10,
  tips = 2 
) |>
  arrow::arrow_table(schema = arrow::schema(
    year = arrow::int32(),
    month = arrow::int32(),
    PULocationID = arrow::int64(),
    DOLocationID = arrow::int64(),
    request_datetime = arrow::timestamp(unit = "us"),
    dropoff_datetime = arrow::timestamp(unit = "us"),
    driver_pay = double(),
    tips = double()
  ))


simulate_trips(ArrowDf,
               start_datetime = start_datetime,
               start_zone = start_zone,
               minutes_next_trip = 6L,
               end_datetime = start_datetime + lubridate::hours(1L),
               valid_end_zones = valid_zones,
               closest_zone = closest_zones,
               borough_zones = borough_zones) |>
  dplyr::collect()

}

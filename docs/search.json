[{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"web-scraping","dir":"Articles","previous_headings":"","what":"Web Scraping","title":"01 - Data Collection Process","text":"always updated list 2022 2023 links High Volume -Hire Vehicles documents let’s scrape TLC Trip Record Data using rvest library. page also can find link download codes related Zone.","code":"SourcePage <-   rvest::read_html(\"https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page\")  TripLinks <-   SourcePage |>   rvest::html_elements(xpath = '//div[@class=\"faq-answers\"]//li/a') |>   rvest::html_attr(\"href\") |>   grep(pattern = \"fhvhv_[a-z]+_202[23]-\\\\d{2}\\\\.parquet\", value = TRUE) |>   trimws() |>   sort()  FileNames <- basename(TripLinks)  FileNames #>  [1] \"fhvhv_tripdata_2022-01.parquet\" \"fhvhv_tripdata_2022-02.parquet\" #>  [3] \"fhvhv_tripdata_2022-03.parquet\" \"fhvhv_tripdata_2022-04.parquet\" #>  [5] \"fhvhv_tripdata_2022-05.parquet\" \"fhvhv_tripdata_2022-06.parquet\" #>  [7] \"fhvhv_tripdata_2022-07.parquet\" \"fhvhv_tripdata_2022-08.parquet\" #>  [9] \"fhvhv_tripdata_2022-09.parquet\" \"fhvhv_tripdata_2022-10.parquet\" #> [11] \"fhvhv_tripdata_2022-11.parquet\" \"fhvhv_tripdata_2022-12.parquet\" #> [13] \"fhvhv_tripdata_2023-01.parquet\" \"fhvhv_tripdata_2023-02.parquet\" #> [15] \"fhvhv_tripdata_2023-03.parquet\" \"fhvhv_tripdata_2023-04.parquet\" #> [17] \"fhvhv_tripdata_2023-05.parquet\" \"fhvhv_tripdata_2023-06.parquet\" #> [19] \"fhvhv_tripdata_2023-07.parquet\" \"fhvhv_tripdata_2023-08.parquet\" #> [21] \"fhvhv_tripdata_2023-09.parquet\" \"fhvhv_tripdata_2023-10.parquet\" #> [23] \"fhvhv_tripdata_2023-11.parquet\" \"fhvhv_tripdata_2023-12.parquet\" TaxiZoneLink <-   SourcePage |>   rvest::html_elements(xpath = '//ul/li/a[text()=\"Taxi Zone Lookup Table\"]')  |>   rvest::html_attr(\"href\") |>   trimws()  TaxiZoneLink #> [1] \"https://d37ci6vzurychx.cloudfront.net/misc/taxi_zone_lookup.csv\""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"saving-files","dir":"Articles","previous_headings":"","what":"Saving files","title":"01 - Data Collection Process","text":"take advantage best capacities arrow need save parquet file folder useful information filter later, one folder level related years next sub-folders related month parquet name part-0.parquet following next process: Creating main folder store data. Defining new folder save trip data parquet files. Defining sub-folders split files based year. Creating folder month. Downloading file folder.","code":"RawDataPath <- here::here(\"raw-data\")  if(!\"raw-data\" %in% dir(here::here())) dir.create(RawDataPath) ParquetFolderPath <- file.path(RawDataPath, \"trip-data\")  if(!\"trip-data\" %in% dir(RawDataPath)) dir.create(ParquetFolderPath) YearFolders <- gsub(   x = FileNames,   pattern = \"^fhvhv_tripdata_|-\\\\d{2}\\\\.parquet$\",   replacement = \"\" ) |>   paste0(\"year=\", a = _)  YearFoldersUnique <- unique(YearFolders) YearFoldersPath <- file.path(ParquetFolderPath, YearFoldersUnique)  for(year_i in YearFoldersPath) dir.create(year_i, showWarnings = FALSE) MonthFolders <- gsub(   x = FileNames,   pattern = \"^fhvhv_tripdata_\\\\d{4}-|\\\\.parquet$\",   replacement = \"\" ) |>   paste0(\"month=\", a = _)  MonthFoldersPath <- file.path(ParquetFolderPath, YearFolders, MonthFolders)  for(month_i in MonthFoldersPath) dir.create(month_i, showWarnings = FALSE) # Parquet files might time a longer time to be downloaded options(timeout = 1800)   # Parquet trip data for(link_i in seq_along(TripLinks)){      download.file(TripLinks[link_i],                 destfile = file.path(MonthFoldersPath[link_i],\"part-0.parquet\"),                 mode = \"wb\")    }   # Taxi Zone CSV download.file(TaxiZoneLink,               destfile = file.path(RawDataPath,\"taxi_zone_lookup.csv\"),               mode = \"wb\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"final-result","dir":"Articles","previous_headings":"","what":"Final result","title":"01 - Data Collection Process","text":"getting files end next structure data folder.","code":"fs::dir_tree(RawDataPath) #> C:/Users/anfeliz/Particular Projects/project.nyc.taxi/raw-data #> ├── taxi_zone_lookup.csv #> ├── TrainingTrips.fst #> └── trip-data #>     ├── year=2022 #>     │   ├── month=01 #>     │   │   └── part-0.parquet #>     │   ├── month=02 #>     │   │   └── part-0.parquet #>     │   ├── month=03 #>     │   │   └── part-0.parquet #>     │   ├── month=04 #>     │   │   └── part-0.parquet #>     │   ├── month=05 #>     │   │   └── part-0.parquet #>     │   ├── month=06 #>     │   │   └── part-0.parquet #>     │   ├── month=07 #>     │   │   └── part-0.parquet #>     │   ├── month=08 #>     │   │   └── part-0.parquet #>     │   ├── month=09 #>     │   │   └── part-0.parquet #>     │   ├── month=10 #>     │   │   └── part-0.parquet #>     │   ├── month=11 #>     │   │   └── part-0.parquet #>     │   └── month=12 #>     │       └── part-0.parquet #>     └── year=2023 #>         ├── month=01 #>         │   └── part-0.parquet #>         ├── month=02 #>         │   └── part-0.parquet #>         ├── month=03 #>         │   └── part-0.parquet #>         ├── month=04 #>         │   └── part-0.parquet #>         ├── month=05 #>         │   └── part-0.parquet #>         ├── month=06 #>         │   └── part-0.parquet #>         ├── month=07 #>         │   └── part-0.parquet #>         ├── month=08 #>         │   └── part-0.parquet #>         ├── month=09 #>         │   └── part-0.parquet #>         ├── month=10 #>         │   └── part-0.parquet #>         └── month=11 #>             └── part-0.parquet"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-name","dir":"Articles","previous_headings":"","what":"Project Name","title":"02 - Business Understanding","text":"Increasing NYC Taxi Drivers Earnings.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"problem-statement","dir":"Articles","previous_headings":"","what":"Problem Statement","title":"02 - Business Understanding","text":"problem taxi drivers’ net earnings high due lack strategy increasing tips.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-scope","dir":"Articles","previous_headings":"","what":"Project Scope","title":"02 - Business Understanding","text":"project limited Juno, Uber, Via Lyft taxi drivers work New York City.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"stakeholders","dir":"Articles","previous_headings":"","what":"Stakeholders","title":"02 - Business Understanding","text":"Taxi drivers Taxi companies Customers NYC Taxi Limousine Commission","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"top-process-definition","dir":"Articles","previous_headings":"","what":"Top Process Definition","title":"02 - Business Understanding","text":"define elements process, use SIPOC diagram.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"data-to-use","dir":"Articles","previous_headings":"","what":"Data to Use","title":"02 - Business Understanding","text":"project, use subset data available TLC Trip Record Data 2022 2023 High Volume -Hire Vehicle columns described describes source data dictonary. Based variables available, can divide 2 categories.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"available-before-arriving-at-the-pick-up-location","dir":"Articles","previous_headings":"Data to Use","what":"Available Before Arriving at the Pick-Up Location","title":"02 - Business Understanding","text":"used predictors train model. request_datetime PULocationID DOLocationID hvfhs_license_num dispatching_base_num originating_base_num trip_miles base_passenger_fare shared_request_flag access_a_ride_flag wav_request_flag wav_match_flag","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"available-after-ending-the-trip","dir":"Articles","previous_headings":"Data to Use","what":"Available After Ending the Trip","title":"02 - Business Understanding","text":"used create outcome variable needs predicted model. dropoff_datetime driver_pay tips on_scene_datetime pickup_datetime trip_time tolls bcf sales_tax congestion_surcharge airport_fee shared_match_flag","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-objective","dir":"Articles","previous_headings":"","what":"Project Objective","title":"02 - Business Understanding","text":"objective project develop strategy select best paid trips possible get consistent increase NYC taxi drivers’ income.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-business-metric","dir":"Articles","previous_headings":"","what":"Defining Business Metric","title":"02 - Business Understanding","text":"Based current information, can say objective increase Daily Hourly Wage received taxi driver defined following formula: \\[ \\text{Daily Hourly Wage} = \\frac{\\text{Total Earnings}}{\\text{Total Hours Worked}} \\]","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-outcome-to-predict","dir":"Articles","previous_headings":"","what":"Defining Outcome to Predict","title":"02 - Business Understanding","text":"clear business problem solve, ’s important also make translation data science problem can solve using available data. want increase earning reduce time, can use calculate predict profit_rate trip, understand behind best pay trips. \\[ \\text{profit rate} = \\frac{\\text{driver pay} + \\text{tips}}{\\text{dropoff datetime}-\\text{request datetime}} \\]","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-metrics-base-line","dir":"Articles","previous_headings":"","what":"Defining Metric’s Base Line","title":"02 - Business Understanding","text":"Defining baseline based data challenge data doesn’t unique id make estimation, can run simulation estimate value confident interval. simulation based following assumptions related taxi drivers: can start work zone Manhattan, Brooklyn Queens (active ones). work 8 12 hour every day. can start work month, weekday hour. just can take trips starting zone ending last trip maximum waiting time receiving new trip request 6 minutes. taxi driver find new trip first 6 minutes, can extend 6 minutes drive closest zone find new trip, doesn’t work next 6 minutes can drive zone current Borough.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"runing-trips-simulation","dir":"Articles","previous_headings":"Defining Metric’s Base Line","what":"Runing trips simulation","title":"02 - Business Understanding","text":"Load environment use. Create connection parquet files without loading RAM. Use locations ids trips can estimate mean distance pear locations. Define named vectors can return closest location id locations ids dataset. Restrict location ids use ones related zones. Link possible zones location id based Borough. Defining simulation start. Based start point simulate day work.","code":"library(project.nyc.taxi) library(here) library(scales) library(ggplot2) library(data.table) library(lubridate) library(dplyr) library(arrow) library(infer)  options(datatable.print.nrows = 15) NycTrips <- open_dataset(here(\"raw-data/trip-data\"))  nrow(NycTrips) |> scales::comma() |> paste0(\" rows\") #> [1] \"424,389,806 rows\" LocationsMeanDistance <-   NycTrips |>   group_by(PULocationID, DOLocationID) |>   summarize(trip_miles_mean = mean(trip_miles)) |>   collect() |>   as.data.table()  LocationsMeanDistance #>        PULocationID DOLocationID trip_miles_mean #>               <int>        <int>           <num> #>     1:          170          161        1.151628 #>     2:          237          161        1.215804 #>     3:          262          229        2.199780 #>     4:          229          141        1.158538 #>     5:          263           79        5.179522 #>    ---                                           #> 66173:          199          197        9.950000 #> 66174:          153          154       31.880000 #> 66175:          184          149       32.550000 #> 66176:           81          111       25.640000 #> 66177:          185          105       21.180000 ClosestZone <-      # We are bind the same table after exchanging the id columns   # to make sure that all ids are present in both column for any   # pair of ids   rbind(LocationsMeanDistance,         LocationsMeanDistance[, .(PULocationID = DOLocationID,                                   DOLocationID = PULocationID,                                   trip_miles_mean)]      # We need to make sure to place the lower distances at the top     )[order(     # This expression help me to place distances between the same location     # at the bottom of the list with needing to open another []     (PULocationID == DOLocationID),      # Then we just need to pass the distance column     trip_miles_mean     ),           # This expression will select the first row of the data.table     # for each PULocationID to avoid duplication     .SD[1L],     by = \"PULocationID\"        # To end the process we just need to create named vector   # that we will use to return the closest location for any  id   ][, setattr(DOLocationID, \"names\", PULocationID)]   head(ClosestZone) #> 105 228  87 209 153 128  #> 228 105 209  87 128 153 ValidZoneCodes <- fread(   here(\"raw-data/taxi_zone_lookup.csv\"),   colClasses = c(\"integer\",                  \"character\",                  \"character\",                  \"character\") )[Borough %chin% c(\"Manhattan\", \"Brooklyn\", \"Queens\")] BoroughZones <-   ValidZoneCodes[, .(LocationID,                      id_list = list(LocationID)),                  by = \"Borough\"]  head(BoroughZones) #>    Borough LocationID               id_list #>     <char>      <int>                <list> #> 1:  Queens          2  2, 7, 8, 9,10,15,... #> 2:  Queens          7  2, 7, 8, 9,10,15,... #> 3:  Queens          8  2, 7, 8, 9,10,15,... #> 4:  Queens          9  2, 7, 8, 9,10,15,... #> 5:  Queens         10  2, 7, 8, 9,10,15,... #> 6:  Queens         15  2, 7, 8, 9,10,15,... # Repeating the experiment to create confident intervals NumRepetitions <- 30L  # Defining the seed set.seed(1558)  # Defining the starting point of each repetition RandomStartPoint <- data.table(   simulation_day = 1:NumRepetitions,   PULocationID = sample(ValidZoneCodes$LocationID, NumRepetitions, replace = TRUE),   hours_to_work = sample(8:12, NumRepetitions, replace = TRUE),   start_time = make_datetime(     year = sample(c(2022L, 2023L), NumRepetitions, replace = TRUE),     month = sample(1:12, NumRepetitions, replace = TRUE),     day = sample(1:31, NumRepetitions, replace = TRUE),     hour = sample(0:23, NumRepetitions, replace = TRUE)   ) )  head(RandomStartPoint) #>    simulation_day PULocationID hours_to_work          start_time #>             <int>        <int>         <int>              <POSc> #> 1:              1           82             8 2023-06-05 22:00:00 #> 2:              2          216            10 2022-08-30 23:00:00 #> 3:              3          149             8 2022-05-27 02:00:00 #> 4:              4           91            10 2022-11-22 04:00:00 #> 5:              5          219            10 2022-03-31 21:00:00 #> 6:              6          108            12 2023-03-29 14:00:00 BaseLineSimulation <-   RandomStartPoint[     , simulate_trips(NycTrips,                      start_datetime = start_time,                      start_zone = PULocationID,                      minutes_next_trip = 6L,                      end_datetime = start_time + hours(hours_to_work),                      valid_end_zones = ValidZoneCodes$LocationID,                      closest_zone = ClosestZone,                      borough_zones = BoroughZones),     by = \"simulation_day\"   ][RandomStartPoint, on = \"simulation_day\"]"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"infering-daily-hourly-wage","dir":"Articles","previous_headings":"Defining Metric’s Base Line","what":"Infering Daily Hourly Wage","title":"02 - Business Understanding","text":"simulating 30 days, can use bootstrap infer distribution mean Daily Hourly Wage day year following next steps. Calculate Daily Hourly Wage simulated day. need resample replacement new 30 days hourly wage 3,000 times calculate mean resample. Compute 95% confident interval. Visualize estimated distribution.","code":"SimulationHourlyWage <-   BaseLineSimulation[, .(`Driver Pay` = sum(s_driver_pay),                          `Tips` = sum(s_tips),                          `Hours Worked` =                             difftime(max(s_dropoff_datetime),                                     min(s_request_datetime),                                     units = \"hours\") |>                            as.double()),                      by = \"simulation_day\"]  SimulationHourlyWage[, `Daily Hourly Wage` := (`Driver Pay` + Tips) / `Hours Worked`]  SimulationHourlyWage[order(-`Daily Hourly Wage`)] #>     simulation_day Driver Pay  Tips Hours Worked Daily Hourly Wage #>              <int>      <num> <num>        <num>             <num> #>  1:              3     426.65 23.86     8.399722          53.63392 #>  2:              7     490.49 53.23    10.982222          49.50911 #>  3:             23     517.53 23.08    11.324722          47.73715 #>  4:              5     464.62 21.22    10.188889          47.68332 #>  5:             28     458.33 20.69    10.205833          46.93590 #> ---                                                                #> 26:              1     303.72  9.55     8.242222          38.00795 #> 27:             11     341.36  9.41     9.299444          37.71946 #> 28:             19     390.97 17.91    11.051667          36.99713 #> 29:              8     314.33  0.00     9.020556          34.84597 #> 30:              4     284.98 27.45    10.417222          29.99168 set.seed(1586) BootstrapHourlyWage <-   specify(SimulationHourlyWage,           `Daily Hourly Wage` ~ NULL) |>   generate(reps = 3000, type = \"bootstrap\") |>   calculate(stat = \"mean\")  BootstrapHourlyWage #> Response: Daily Hourly Wage (numeric) #> # A tibble: 3,000 × 2 #>    replicate  stat #>        <int> <dbl> #>  1         1  43.0 #>  2         2  42.0 #>  3         3  41.9 #>  4         4  42.3 #>  5         5  40.7 #>  6         6  42.5 #>  7         7  42.3 #>  8         8  41.7 #>  9         9  42.3 #> 10        10  43.3 #> # ℹ 2,990 more rows BootstrapInterval <-    get_ci(BootstrapHourlyWage,           level = 0.95,          type = \"percentile\")  BootstrapInterval #> # A tibble: 1 × 2 #>   lower_ci upper_ci #>      <dbl>    <dbl> #> 1     40.4     43.6 visualize(BootstrapHourlyWage)+   shade_ci(endpoints = BootstrapInterval,            color = \"#2c77BF\",            fill = \"#2c77BF\")+   annotate(geom = \"text\",            y = 400,            x = c(BootstrapInterval[1L][[1L]] - 0.4,                  BootstrapInterval[2L][[1L]] + 0.4),            label = unlist(BootstrapInterval) |> comma(accuracy = 0.01))+   labs(title = \"Mean Hourly Wage Distribution\",        subtitle = paste0(\"Mean: \", round(mean(SimulationHourlyWage$`Daily Hourly Wage`), 2),                          \", Median: \", round(median(SimulationHourlyWage$`Daily Hourly Wage`), 2)),        y = \"Count\")+   theme_light()+   theme(panel.grid.minor.y = element_blank(),         panel.grid.major.y = element_blank(),         plot.title = element_text(face = \"bold\"),         axis.title.x = element_blank())"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"business-case","dir":"Articles","previous_headings":"","what":"Business Case","title":"02 - Business Understanding","text":"base driver’s pay increases costs like gas, time car’s maintenance best way increase total earning increasing amount tips drivers receive customers. Based 424,389,806 trips recorded 2022 2023, drivers received $469,726,156 tips 5% total earnings year, example driver improves strategy increase tips 20% current earning earning $1,334.08 extra monthly works 8 hours day, 5 days week earns $41.69 hourly.","code":"NycTrips |>   summarize(number_of_trips = sum(!is.na(PULocationID)),             trips_with_tips = sum(tips > 0, na.rm = TRUE),             driver_net_earning = sum(driver_pay + tips, na.rm = TRUE),             tips = sum(tips, na.rm = TRUE)) |>   collect() |>   as.data.table() |>   (\\(dt)  dt[, .(number_of_trips = comma(number_of_trips),                  trips_with_tips = comma(trips_with_tips),                  trips_with_tips_pct = percent(trips_with_tips / number_of_trips),                  driver_net_earning = dollar(driver_net_earning),                  tips = dollar(tips),                  tips_pct = percent(tips/driver_net_earning))           ][, melt(.SD,                     measure.vars = names(.SD),                    variable.name = \"Summary Variable\",                    value.name = \"Total\",                    variable.factor = FALSE)]    )() #>       Summary Variable          Total #>                 <char>         <char> #> 1:     number_of_trips    424,389,806 #> 2:     trips_with_tips     84,493,591 #> 3: trips_with_tips_pct            20% #> 4:  driver_net_earning $8,543,381,798 #> 5:                tips   $469,726,156 #> 6:            tips_pct             5%"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"projects-side-benefits","dir":"Articles","previous_headings":"","what":"Project’s Side Benefits","title":"02 - Business Understanding","text":"’s also important consider Taxi companies customers can benefit drivers earning tips several ways: Employee Satisfaction: Higher tips can lead increased job satisfaction among drivers, can improve performance reduce turnover rates. Company Reputation: drivers earning tips, indicate providing excellent service, can enhance company’s reputation. Customer Retention: Satisfied drivers likely provide better customer service, can lead higher customer retention rates. Better Service: Drivers earn tips often provide better service. mean cleaner vehicles, courteous behavior, enjoyable ride overall. Driver Availability: tip earnings high, attract drivers work, potentially reducing wait times customers. Safety: Drivers worried earnings might less likely engage risky behaviors (like speeding working overly long shifts) earn .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"deliverables","dir":"Articles","previous_headings":"","what":"Deliverables","title":"02 - Business Understanding","text":"Shiny app assists drivers focusing attention better trips.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"setting-the-environment-up","dir":"Articles","previous_headings":"","what":"Setting the environment up","title":"03 - Data Understanding","text":"setting R environment just need apply following 4 steps: Loading packages use. Creating Arrow connection object perform manipulations disk taking data RAM memory. Importing zone code description lat long. Now can confirm new coordinates makes sense. Counting number trips code, collecting translating zone codes.","code":"library(project.nyc.taxi) library(here) library(data.table) library(ggplot2) library(scales) library(forcats) library(lubridate) library(dplyr) library(arrow) library(recipes)  options(datatable.print.nrows = 15,         digits = 4) data_path <- here(\"raw-data/trip-data/year=2022\")  NycTrips2022 <- open_dataset(data_path)  dim(NycTrips2022) |> comma() #> [1] \"212,416,083\" \"25\"  NycTrips2022 #> FileSystemDataset with 12 Parquet files #> hvfhs_license_num: string #> dispatching_base_num: string #> originating_base_num: string #> request_datetime: timestamp[us] #> on_scene_datetime: timestamp[us] #> pickup_datetime: timestamp[us] #> dropoff_datetime: timestamp[us] #> PULocationID: int64 #> DOLocationID: int64 #> trip_miles: double #> trip_time: int64 #> base_passenger_fare: double #> tolls: double #> bcf: double #> sales_tax: double #> congestion_surcharge: double #> airport_fee: double #> tips: double #> driver_pay: double #> shared_request_flag: string #> shared_match_flag: string #> access_a_ride_flag: string #> wav_request_flag: string #> wav_match_flag: string #> month: int32 #>  #> See $metadata for additional Schema metadata ZoneCodesArcgis <-    fread(here(\"raw-data/taxi_zone_lookup.csv\"),         colClasses = c(\"integer\",                        \"character\",                        \"character\",                        \"character\")   )[, Address := paste(Zone,                        Borough,                        \"New York\",                        \"United States\",                        sep = \", \")   ][, tidygeocoder::geocode(.SD,                             address = Address,                             method = 'arcgis')]  setDT(ZoneCodesArcgis)  # Correcting manually after checking address on Google Map ZoneCodesArcgis[LocationID == 1L,                 c(\"lat\", \"long\") := .(40.689499,                                       -74.174484)]  glimpse(ZoneCodesArcgis) #> Rows: 265 #> Columns: 7 #> $ LocationID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… #> $ Borough      <chr> \"EWR\", \"Queens\", \"Bronx\", \"Manhattan\", \"Staten Island\", \"… #> $ Zone         <chr> \"Newark Airport\", \"Jamaica Bay\", \"Allerton/Pelham Gardens… #> $ service_zone <chr> \"EWR\", \"Boro Zone\", \"Boro Zone\", \"Yellow Zone\", \"Boro Zon… #> $ Address      <chr> \"Newark Airport, EWR, New York, United States\", \"Jamaica … #> $ lat          <dbl> 40.69, 40.62, 40.87, 40.73, 40.55, 40.60, 40.77, 40.78, 4… #> $ long         <dbl> -74.17, -73.82, -73.84, -73.98, -74.17, -74.06, -73.93, -… BoroughColors <- c(   'Manhattan' = '#e41a1c',   'Queens' = '#377eb8',   'Brooklyn'= '#4daf4a',   'Bronx' = '#984ea3',   'Staten Island' = '#ff7f00',   'EWR' = '#a65628' )  plot_map(   ZoneCodesArcgis,   lng_var = \"long\",   lat_var = \"lat\",   color_var = \"Borough\",   color_palette = BoroughColors,   label_var = \"Zone\" ) TripsZoneDistribution <-   NycTrips2022 |>   count_pct(PULocationID, DOLocationID) |>   add_zone_description(zone_dt = ZoneCodesArcgis,                        start_id_col = \"PULocationID\",                        end_id_col = \"DOLocationID\",                        zone_id_col = \"LocationID\")  glimpse(TripsZoneDistribution) #> Rows: 65,445 #> Columns: 15 #> $ start_borough      <chr> \"Queens\", \"Brooklyn\", \"Queens\", \"Brooklyn\", \"Brookl… #> $ start_zone         <chr> \"JFK Airport\", \"East New York\", \"LaGuardia Airport\"… #> $ start_service_zone <chr> \"Airports\", \"Boro Zone\", \"Airports\", \"Boro Zone\", \"… #> $ start_address      <chr> \"JFK Airport, Queens, New York, United States\", \"Ea… #> $ start_lat          <dbl> 40.64, 40.67, 40.78, 40.63, 40.64, 40.67, 40.63, 40… #> $ start_long         <dbl> -73.79, -73.88, -73.87, -74.00, -73.90, -73.95, -74… #> $ end_borough        <chr> \"Unknown\", \"Brooklyn\", \"Unknown\", \"Brooklyn\", \"Broo… #> $ end_zone           <chr> \"NA\", \"East New York\", \"NA\", \"Borough Park\", \"Canar… #> $ end_service_zone   <chr> \"N/A\", \"Boro Zone\", \"N/A\", \"Boro Zone\", \"Boro Zone\"… #> $ end_address        <chr> \"NA, Unknown, New York, United States\", \"East New Y… #> $ end_lat            <dbl> 40.71, 40.67, 40.71, 40.63, 40.64, 40.67, 40.63, 40… #> $ end_long           <dbl> -74.01, -73.88, -74.01, -74.00, -73.90, -73.95, -74… #> $ n                  <int> 690618, 640891, 453413, 383687, 368971, 324967, 272… #> $ pct                <dbl> 0.003, 0.003, 0.002, 0.002, 0.002, 0.002, 0.001, 0.… #> $ pct_cumulative     <dbl> 0.003, 0.006, 0.008, 0.010, 0.012, 0.014, 0.015, 0.…"},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"categorical-variables","dir":"Articles","previous_headings":"Individual distributions","what":"Categorical variables","title":"03 - Data Understanding","text":"Let’s starting counting checking proportions related category.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"company","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"company","title":"03 - Data Understanding","text":"majority number trips done Uber (HV003) rest Lyft. improve interpretavility need make translation sampling data.","code":"NycTrips2022 |>    count_pct(company = case_when(hvfhs_license_num == \"HV0002\" ~ \"Juno\",                                 hvfhs_license_num == \"HV0003\" ~ \"Uber\",                                 hvfhs_license_num == \"HV0004\" ~ \"Via\",                                 hvfhs_license_num == \"HV0005\" ~ \"Lyft\")) #>    company         n   pct pct_cumulative #>     <char>     <int> <num>          <num> #> 1:    Uber 153847310 0.724          0.724 #> 2:    Lyft  58568773 0.276          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"dispatching_base_num","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"dispatching_base_num","title":"03 - Data Understanding","text":"trips dispatching number B03404 B03406. remaining codes represent small proportion observations.","code":"NycTrips2022 |>   count_pct(dispatching_base_num) #>     dispatching_base_num         n   pct pct_cumulative #>                   <char>     <int> <num>          <num> #>  1:               B03404 153732577 0.724          0.724 #>  2:               B03406  58568773 0.276          1.000 #>  3:               B02764     54512 0.000          1.000 #>  4:               B02872      6078 0.000          1.000 #>  5:               B02395      4789 0.000          1.000 #> ---                                                     #> 25:               B02878       591 0.000          1.000 #> 26:               B02879       458 0.000          1.000 #> 27:               B02875       213 0.000          1.000 #> 28:               B02883       137 0.000          1.000 #> 29:               B02865         3 0.000          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"originating_base_num","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"originating_base_num","title":"03 - Data Understanding","text":"trips originating number B03404 second missing. remaining codes represent small proportion observations.","code":"NycTrips2022 |>   count_pct(originating_base_num) #>     originating_base_num         n   pct pct_cumulative #>                   <char>     <int> <num>          <num> #>  1:               B03404 153730161 0.724          0.724 #>  2:                 <NA>  58498724 0.275          0.999 #>  3:               B03406     71481 0.000          0.999 #>  4:               B02764     54511 0.000          0.999 #>  5:               B02872      6078 0.000          0.999 #> ---                                                     #> 33:               B02003        10 0.000          0.999 #> 34:               B00446         6 0.000          0.999 #> 35:               B01985         5 0.000          0.999 #> 36:               B02865         3 0.000          0.999 #> 37:               B02826         1 0.000          0.999"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"access_a_ride_flag","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"access_a_ride_flag","title":"03 - Data Understanding","text":"Must trips doesn’t provide information related whether administered behalf Metropolitan Transportation Authority (MTA) remaining confirm aren’t.","code":"NycTrips2022 |>   count_pct(access_a_ride_flag) #>    access_a_ride_flag         n   pct pct_cumulative #>                <char>     <int> <num>          <num> #> 1:                    153847310 0.724          0.724 #> 2:                  N  58568773 0.276          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"shared_request_flag","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"shared_request_flag","title":"03 - Data Understanding","text":"passengers don’t request shared/pooled ride.","code":"NycTrips2022 |>   count_pct(shared_request_flag) #>    shared_request_flag         n   pct pct_cumulative #>                 <char>     <int> <num>          <num> #> 1:                   N 210564721 0.991          0.991 #> 2:                   Y   1851362 0.009          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"shared_match_flag","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"shared_match_flag","title":"03 - Data Understanding","text":"passengers don’t request shared/pooled ride, even fewer achieved share ride.","code":"NycTrips2022 |>    count_pct(shared_match_flag) #>    shared_match_flag         n   pct pct_cumulative #>               <char>     <int> <num>          <num> #> 1:                 N 211916075 0.998          0.998 #> 2:                 Y    500008 0.002          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"wav_request_flag","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"wav_request_flag","title":"03 - Data Understanding","text":"’s really unusual request wheelchair-accessible vehicle.","code":"NycTrips2022 |>    count_pct(wav_request_flag) #>    wav_request_flag         n   pct pct_cumulative #>              <char>     <int> <num>          <num> #> 1:                N 212142808 0.999          0.999 #> 2:                Y    273275 0.001          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"wav_match_flag","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"wav_match_flag","title":"03 - Data Understanding","text":"’s really unusual request wheelchair-accessible vehicle, tips take place wheelchair-accessible vehicles, seems service capacity meet demand.","code":"NycTrips2022 |>    count_pct(wav_match_flag) #>    wav_match_flag         n   pct pct_cumulative #>            <char>     <int> <num>          <num> #> 1:              N 199779404 0.941          0.941 #> 2:              Y  12636679 0.059          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"start_borough","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"start_borough","title":"03 - Data Understanding","text":"87% trips start Manhattan, Brooklyn Queens.","code":"TripsZoneDistribution |>   count_pct(start_borough, wt =  n) #>    start_borough        n   pct pct_cumulative #>           <char>    <int> <num>          <num> #> 1:     Manhattan 88031630 0.414          0.414 #> 2:      Brooklyn 54874948 0.258          0.672 #> 3:        Queens 41897696 0.197          0.869 #> 4:         Bronx 24797734 0.117          0.986 #> 5: Staten Island  2803425 0.013          0.999 #> 6:       Unknown    10625 0.000          0.999 #> 7:           EWR       25 0.000          0.999"},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"manhattan","dir":"Articles","previous_headings":"Individual distributions > Categorical variables > start_zone","what":"Manhattan","title":"03 - Data Understanding","text":"","code":"StartZoneTripsManhattan <-   TripsZoneDistribution[start_borough == \"Manhattan\"] |>   count_pct(start_zone,             start_long,             start_lat,             wt =  n/1e6)  head(StartZoneTripsManhattan) #>                   start_zone start_long start_lat     n   pct pct_cumulative #>                       <char>      <num>     <num> <num> <num>          <num> #> 1:              East Village     -73.98     40.73 3.204 0.036          0.036 #> 2: Times Sq/Theatre District     -73.99     40.76 2.839 0.032          0.068 #> 3:            Midtown Center     -73.97     40.76 2.632 0.030          0.098 #> 4:              East Chelsea     -74.00     40.74 2.603 0.030          0.128 #> 5:      TriBeCa/Civic Center     -74.00     40.71 2.576 0.029          0.157 #> 6:                  Union Sq     -73.99     40.74 2.440 0.028          0.185 plot_map(   StartZoneTripsManhattan,   lng_var = \"start_long\",   lat_var = \"start_lat\",   color = unname(BoroughColors[\"Manhattan\"]),   radius = 20,   radius_var = \"n\",   label_var = \"start_zone\" ) |> leaflet::setView(   lng = StartZoneTripsManhattan[start_zone == \"Union Sq\",                                 start_long],   lat = StartZoneTripsManhattan[start_zone == \"Manhattanville\",                                 start_lat],   zoom = 12 )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"end_borough","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"end_borough","title":"03 - Data Understanding","text":"82% trips end Manhattan, Brooklyn Queens.","code":"TripsZoneDistribution |>   count_pct(end_borough, wt =  n) #> Index: <start_borough> #>      end_borough        n   pct pct_cumulative #>           <char>    <int> <num>          <num> #> 1:     Manhattan 80967388 0.381          0.381 #> 2:      Brooklyn 54143716 0.255          0.636 #> 3:        Queens 40982171 0.193          0.829 #> 4:         Bronx 23541369 0.111          0.940 #> 5:       Unknown  8659223 0.041          0.981 #> 6: Staten Island  2755107 0.013          0.994 #> 7:           EWR  1367109 0.006          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"start_service_zone","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"start_service_zone","title":"03 - Data Understanding","text":"96% trips start Boro Zone Yellow Zone. need recode EWR Airports keep classification consistent.","code":"TripsZoneDistribution |>   count_pct(start_service_zone, wt =  n) #> Index: <start_borough> #>    start_service_zone         n   pct pct_cumulative #>                <char>     <int> <num>          <num> #> 1:          Boro Zone 129107636 0.608          0.608 #> 2:        Yellow Zone  75817668 0.357          0.965 #> 3:           Airports   7480129 0.035          1.000 #> 4:                N/A     10625 0.000          1.000 #> 5:                EWR        25 0.000          1.000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"end_service_zone","dir":"Articles","previous_headings":"Individual distributions > Categorical variables","what":"end_service_zone","title":"03 - Data Understanding","text":"91% trips start Boro Zone Yellow Zone. need recode EWR Airports keep classification consistent.","code":"TripsZoneDistribution |>   count_pct(end_service_zone, wt =  n) #> Index: <start_borough> #>    end_service_zone         n   pct pct_cumulative #>              <char>     <int> <num>          <num> #> 1:        Boro Zone 124765613 0.587          0.587 #> 2:      Yellow Zone  69100865 0.325          0.912 #> 3:              N/A   8659223 0.041          0.953 #> 4:         Airports   8523273 0.040          0.993 #> 5:              EWR   1367109 0.006          0.999"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"time-variables","dir":"Articles","previous_headings":"Individual distributions","what":"Time variables","title":"03 - Data Understanding","text":"want predict profit rate related trip, just need consider analysis request_datetime variable available driver starting trip dropoff_datetime point used defining end trip. know taxi trip takes less day doesn’t make sense explore variable related time. Instead, better consecrate efforts understand distribution exploratory variable later explore difference request_datetime dropoff_datetime numeric variable. describe variable, decomposed different parts count number trips element store summary data.table explore part using visualizations.","code":"RequestTimeSummary <-   NycTrips2022 |>   mutate(request_date = as_date(request_datetime)) |>   count(request_month = floor_date(request_date, unit = \"month\"),         request_week = floor_date(request_date, unit = \"week\"),         request_day = day(request_date),         request_weekday = wday(request_date, week_start = 1),         request_hour = hour(request_datetime)) |>   collect() |>   as.data.table()"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"request_datetime-by-month","dir":"Articles","previous_headings":"Individual distributions > Time variables","what":"request_datetime by month","title":"03 - Data Understanding","text":"next chart, can see number trips keeps almost constant must year, fewer trips first 2 months extra trips October December.","code":"RequestTimeSummary[year(request_month) == 2022,                     .(n = sum(n)),                    by = \"request_month\"] |>   ggplot(aes(request_month, n))+   geom_line(color = \"grey60\",             linewidth = 0.9)+   geom_point(color = \"dodgerblue4\",              size = 3)+   scale_x_date(date_labels = \"%y-%m\",                date_breaks = \"2 months\")+   scale_y_continuous(labels = comma_format(),                      breaks = breaks_width(2e6))+   labs(title = \"Distribution of Trips by Month\",        x = \"Trips Request Month\",        y = \"Number of Trips\")+   expand_limits(y = 0)+   theme_light()+   theme(plot.title = element_text(face = \"bold\", hjust = 0.5),         panel.grid.minor = element_blank(),         legend.position = \"top\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"request_datetime-by-week","dir":"Articles","previous_headings":"Individual distributions > Time variables","what":"request_datetime by week","title":"03 - Data Understanding","text":"breaking months weeks can confirm fewer trips first 2 months, relation October don’t see big change number trips see weeks November, December keeps trips normal first 2 weeks.","code":"RequestTimeSummary[year(request_month) == 2022,                     .(n = sum(n)),                    by = \"request_week\"] |>   ggplot(aes(request_week, n))+   geom_line(color = \"grey60\",             linewidth = 0.9)+   geom_point(color = \"dodgerblue4\",              size = 3)+   scale_x_date(date_labels = \"%y-%m\",                date_breaks = \"month\")+   scale_y_continuous(labels = comma_format(),                      breaks = breaks_width(5e5))+   labs(title = \"Distribution of Trips by Week\",        x = \"Trips Request Week\",        y = \"Number of Trips\")+   expand_limits(y = 0)+   theme_light()+   theme(plot.title = element_text(face = \"bold\", hjust = 0.5),         panel.grid.minor = element_blank(),         legend.position = \"top\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"request_datetime-by-month-day","dir":"Articles","previous_headings":"Individual distributions > Time variables","what":"request_datetime by month day","title":"03 - Data Understanding","text":"explore number trips month day can see consistent pattern plotting line total trips month.","code":"RequestTimeSummary[year(request_month) == 2022,                     .(n = sum(n)),                    by = .(request_month = format(request_month, \"%B\"),                           request_day)] |>   ggplot(aes(request_day, n))+   geom_line(aes(group = request_month),             color = \"gray60\",             linewidth = 0.1)+   geom_smooth(method = 'loess',               formula = 'y ~ x',               se = FALSE,               linewidth = 1.2)+   scale_x_continuous(breaks = breaks_width(5))+   scale_y_continuous(labels = comma_format())+   expand_limits(y = 0)+   labs(title = \"Number of Trips by Month Day\",        y = \"Number of Trips\",        x = \"Day of Month\")+   theme_light()+   theme(panel.grid = element_blank(),         plot.title = element_text(face = \"bold\"))"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"request_datetime-by-week-day","dir":"Articles","previous_headings":"Individual distributions > Time variables","what":"request_datetime by week day","title":"03 - Data Understanding","text":"change month day prior chart week day can find number trips trends higher Fridays Saturdays.","code":"RequestTimeSummary[year(request_month) == 2022,                     .(n = sum(n)),                    by = .(request_month = format(request_month, \"%B\"),                           request_weekday)] |>   ggplot(aes(request_weekday, n))+   geom_line(aes(group = request_month),             color = \"gray60\")+   geom_smooth(method = 'loess',               formula = 'y ~ x',               se = FALSE,               linewidth = 1.2)+   scale_x_continuous(breaks = breaks_width(1),                      labels = factor_weekday)+   scale_y_continuous(labels = comma_format())+   expand_limits(y = 0)+   labs(title = \"Number of Trips by Week Day\",        y = \"Number of Trips\",        x = \"Day of Week\")+   theme_light()+   theme(panel.grid.minor = element_blank(),         plot.title = element_text(face = \"bold\"))"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"request_datetime-by-week-day-and-hour","dir":"Articles","previous_headings":"Individual distributions > Time variables","what":"request_datetime by week day and hour","title":"03 - Data Understanding","text":"understand better happening Fridays Saturdays let’s break week day hour. next chart, can see higher number trips start 17:00 end 1:00 next day Fridays Saturdays.","code":"RequestTimeSummary[year(request_month) == 2022,                     .(n = sum(n)),                    by = .(request_hour =                              factor(request_hour) |> fct_rev(),                            request_weekday = factor_weekday(request_weekday))   ][, n_million := n/1e6 ] |>   ggplot(aes(request_weekday, request_hour))+   geom_tile(aes(fill = n),             color = \"black\",             linewidth = 0.005)+   geom_text(aes(label = comma(n_million, accuracy = 0.1, suffix = \" M\")))+   scale_fill_gradient(low = \"white\",                        high = \"dodgerblue4\",                       labels= comma_format())+   scale_x_discrete(position = \"top\") +   labs(title = \"Number of Trips by Hour and Week Day\",        fill = \"Number of Trips\",        x = \"Request Week Day\",        y = \"Request Hour\") +   theme_classic() +   theme(plot.title = element_text(face = \"bold\"),         axis.ticks = element_blank(),         axis.line = element_blank(),         axis.text = element_text(color = \"black\"))"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"numeric-variables","dir":"Articles","previous_headings":"Individual distributions","what":"Numeric variables","title":"03 - Data Understanding","text":"Last least, time check explore individual distribution numeric variable based summary metrics using custom compute_num_summary use power arrow package.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"trip_miles","dir":"Articles","previous_headings":"Individual distributions > Numeric variables","what":"trip_miles","title":"03 - Data Understanding","text":"can see min distance 0 miles can possible trip duration also short, need check cases higher distance 634 miles, can valid outlier taking consideration higher whisker 13.2 miles. can also check 24.4K trips 100 miles. even just taking long trips can see 90% trips shorter 200 miles, trips doesn’t look like good examples train model.","code":"NycTrips2022 |>   compute_num_summary(trip_miles) #> Warning: quantile() currently returns an approximate quantile in Arrow #> This warning is displayed once per session. #> Warning: median() currently returns an approximate median in Arrow #> This warning is displayed once per session. #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  5.87         0         -5.35  1.61  3.02  5.03  6.25           13.2      634. NycTrips2022 |>   count_pct(trip_miles_status = case_when(trip_miles < 100 ~ \"Normal trips\",                                           trip_miles >= 100 ~ \"Long Trips\"),             digits = 4L) #>    trip_miles_status         n    pct pct_cumulative #>               <char>     <int>  <num>          <num> #> 1:      Normal trips 212391618 0.9999         0.9999 #> 2:        Long Trips     24465 0.0001         1.0000 NycTrips2022 |>   filter(trip_miles >= 100) |>   count_pct(miles_interval = case_when(trip_miles >= 600 ~ \">=600\",                                        trip_miles >= 500 ~ \"[500, 600)\",                                        trip_miles >= 400 ~ \"[400, 500)\",                                        trip_miles >= 300 ~ \"[300, 400)\",                                        trip_miles >= 200 ~ \"[200, 300)\",                                        trip_miles >= 150 ~ \"[150, 200)\",                                        trip_miles >= 130 ~ \"[130, 150)\",                                        trip_miles >= 115 ~ \"[115, 130)\",                                        trip_miles >= 100 ~ \"[100,115)\"),             digits = 4L) #>    miles_interval     n    pct pct_cumulative #>            <char> <int>  <num>          <num> #> 1:      [100,115) 11735 0.4797         0.4797 #> 2:     [115, 130)  5292 0.2163         0.6960 #> 3:     [130, 150)  2802 0.1145         0.8105 #> 4:     [150, 200)  2370 0.0969         0.9074 #> 5:     [200, 300)  1675 0.0685         0.9759 #> 6:     [300, 400)   248 0.0101         0.9860 #> 7:     [400, 500)   233 0.0095         0.9955 #> 8:     [500, 600)    95 0.0039         0.9994 #> 9:          >=600    15 0.0006         1.0000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"base_passenger_fare","dir":"Articles","previous_headings":"Individual distributions > Numeric variables","what":"base_passenger_fare","title":"03 - Data Understanding","text":"Just checking summary statistics can see important problems: base fare can negative base almost $5k much checking closer distribution can confirm 99% trips present base fare 5 50 dollars, fare higher 750 dollars seems weird won’t used train model.","code":"NycTrips2022 |>   compute_num_summary(base_passenger_fare) #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  19.7     -520.         -15.0  11.4  18.2  23.7  29.1           55.5     4996. NycTrips2022 |>   count_pct(base_passenger_fare_interval =                case_when(base_passenger_fare >= 4000 ~ \">=4000\",                         base_passenger_fare >= 3000 ~ \"[3000, 4000)\",                         base_passenger_fare >= 2000 ~ \"[2000, 3000)\",                         base_passenger_fare >= 1000 ~ \"[1000, 2000)\",                         base_passenger_fare >= 750 ~ \"[750, 1000)\",                         base_passenger_fare >= 500 ~ \"[500, 750)\",                         base_passenger_fare >= 400 ~ \"[400, 500)\",                         base_passenger_fare >= 300 ~ \"[300, 400)\",                         base_passenger_fare >= 200 ~ \"[200, 300)\",                         base_passenger_fare >= 100 ~ \"[100, 200)\",                         base_passenger_fare >= 50 ~ \"[50, 10)\",                         base_passenger_fare >= 5 ~ \"[5, 50)\",                         base_passenger_fare >= 0 ~ \"[0, 5)\",                         TRUE ~ \"<0\"),             digits = 8L) #>     base_passenger_fare_interval         n       pct pct_cumulative #>                           <char>     <int>     <num>          <num> #>  1:                      [5, 50) 196074667 9.231e-01         0.9231 #>  2:                     [50, 10)  13910864 6.549e-02         0.9886 #>  3:                   [100, 200)   1866578 8.787e-03         0.9973 #>  4:                           <0    233608 1.100e-03         0.9984 #>  5:                       [0, 5)    175426 8.259e-04         0.9993 #>  6:                   [200, 300)    123817 5.829e-04         0.9999 #>  7:                   [300, 400)     21832 1.028e-04         1.0000 #>  8:                   [400, 500)      5225 2.460e-05         1.0000 #>  9:                   [500, 750)      3290 1.549e-05         1.0000 #> 10:                  [750, 1000)       482 2.270e-06         1.0000 #> 11:                 [1000, 2000)       241 1.130e-06         1.0000 #> 12:                 [2000, 3000)        49 2.300e-07         1.0000 #> 13:                 [3000, 4000)         3 1.000e-08         1.0000 #> 14:                       >=4000         1 0.000e+00         1.0000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"driver_pay","dir":"Articles","previous_headings":"Individual distributions > Numeric variables","what":"driver_pay","title":"03 - Data Understanding","text":"Just checking summary statistics can confirm also driver_pay sharing problems base_passenger_fare. checking distribution can confirm paying 750 must mistake don’t want use training model.","code":"NycTrips2022 |>   compute_num_summary(driver_pay) #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  15.4     -407.         -12.9  8.85  14.3  18.7  23.3           45.1     4643. NycTrips2022 |>   count_pct(driver_pay_interval =                case_when(driver_pay >= 4000 ~ \">=4000\",                         driver_pay >= 3000 ~ \"[3000, 4000)\",                         driver_pay >= 2000 ~ \"[2000, 3000)\",                         driver_pay >= 1000 ~ \"[1000, 2000)\",                         driver_pay >= 750 ~ \"[750, 1000)\",                         driver_pay >= 500 ~ \"[500, 750)\",                         driver_pay >= 400 ~ \"[400, 500)\",                         driver_pay >= 300 ~ \"[300, 400)\",                         driver_pay >= 200 ~ \"[200, 300)\",                         driver_pay >= 100 ~ \"[100, 200)\",                         driver_pay >= 50 ~ \"[50, 10)\",                         driver_pay >= 5 ~ \"[5, 50)\",                         driver_pay >= 0 ~ \"[0, 5)\",                         TRUE ~ \"<0\"),             digits = 8L) #>     driver_pay_interval         n       pct pct_cumulative #>                  <char>     <int>     <num>          <num> #>  1:             [5, 50) 202732167 9.544e-01         0.9544 #>  2:            [50, 10)   7570284 3.564e-02         0.9900 #>  3:              [0, 5)   1371619 6.457e-03         0.9965 #>  4:          [100, 200)    688052 3.239e-03         0.9997 #>  5:          [200, 300)     40563 1.910e-04         0.9999 #>  6:          [300, 400)      6864 3.231e-05         1.0000 #>  7:                  <0      2678 1.261e-05         1.0000 #>  8:          [400, 500)      2164 1.019e-05         1.0000 #>  9:          [500, 750)      1201 5.650e-06         1.0000 #> 10:         [750, 1000)       327 1.540e-06         1.0000 #> 11:        [1000, 2000)       160 7.500e-07         1.0000 #> 12:        [2000, 3000)         3 1.000e-08         1.0000 #> 13:              >=4000         1 0.000e+00         1.0000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"tips","dir":"Articles","previous_headings":"Individual distributions > Numeric variables","what":"tips","title":"03 - Data Understanding","text":"column looks really good, makes sense 75% trips tip 0 mandatory, trip $294 tip hard believe. braking tips can see 80% trips don’t present tip must tips lower 50 dollars, gets really hard achieved based tips.","code":"NycTrips2022 |>   compute_num_summary(tips) #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  3.04         0             0     0     0  1.08     0              0      294. NycTrips2022 |>   count_pct(tips_interval = case_when(tips >= 250 ~ \">=250\",                                       tips >= 200 ~ \"[200, 250)\",                                       tips >= 150 ~ \"[150, 200)\",                                       tips >= 100 ~ \"[100, 150)\",                                       tips >= 50 ~ \"[50, 100)\",                                       tips > 0 ~ \"(0, 50)\",                                       TRUE ~ \"0\"),             digits = 8L) #>    tips_interval         n       pct pct_cumulative #>           <char>     <int>     <num>          <num> #> 1:             0 170057940 8.006e-01         0.8006 #> 2:       (0, 50)  42325635 1.993e-01         0.9998 #> 3:     [50, 100)     31872 1.500e-04         1.0000 #> 4:    [100, 150)       572 2.690e-06         1.0000 #> 5:    [150, 200)        56 2.600e-07         1.0000 #> 6:    [200, 250)         7 3.000e-08         1.0000 #> 7:         >=250         1 0.000e+00         1.0000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"trip_minutes","dir":"Articles","previous_headings":"Individual distributions > Numeric variables","what":"trip_minutes","title":"03 - Data Understanding","text":"taking difference minutes request time drop time minutes, can see negative trips much longer hour. Now can see 99% trips takes less 2 hours 152,049 trips 2 hour trip.","code":"NycTrips2022 |>   mutate(trip_minutes = arrow_minutes_between(request_datetime, dropoff_datetime)) |>   compute_num_summary(trip_minutes) #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <int>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <int> #> 1  14.7      -314         -9.28  14.6  21.0  24.6  30.5           54.4      2469 NycTrips2022 |>   mutate(trip_minutes = arrow_minutes_between(request_datetime, dropoff_datetime)) |>   count_pct(trip_minutes_status = case_when(trip_minutes < 0 ~ \"Negative\",                                             trip_minutes <= 60   ~ \"1 hour or less\",                                             trip_minutes <= (60*2) ~ \"(1:00, 2:00]\",                                             trip_minutes <= (60*3) ~ \"(2:00, 3:00]\",                                             trip_minutes > (60*3) ~ \">3 hours\"),             digits = 6L) #>    trip_minutes_status         n      pct pct_cumulative #>                 <char>     <int>    <num>          <num> #> 1:      1 hour or less 206298571 0.971200         0.9712 #> 2:        (1:00, 2:00]   5740869 0.027027         0.9982 #> 3:            Negative    224594 0.001057         0.9993 #> 4:        (2:00, 3:00]    132341 0.000623         0.9999 #> 5:            >3 hours     19708 0.000093         1.0000"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"sampling-data","dir":"Articles","previous_headings":"","what":"Sampling data","title":"03 - Data Understanding","text":"Due limited compute power capacity need sample data able unlock R capacities. trips take place Manhattan, Brooklyn Queens, going focus first zones.","code":"BoroughToKeep <- c(\"Manhattan\", \"Brooklyn\", \"Queens\")  TrainingTrips <-   dir(data_path,       full.names = TRUE,       recursive = TRUE) |>   lapply(sample_parquet,          valid_zones = ZoneCodesArcgis[Borough %chin% BoroughToKeep, LocationID],          prob = 0.01) |>   rbindlist()"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"solving-quality-problems","dir":"Articles","previous_headings":"","what":"Solving quality problems","title":"03 - Data Understanding","text":"","code":"TrainingTripsCleaned <-   TrainingTrips |>   add_zone_description(zone_dt = ZoneCodesArcgis,                        start_id_col = \"PULocationID\",                        end_id_col = \"DOLocationID\",                        zone_id_col = \"LocationID\") |>   apply_base_cleaning() |>   add_datetime_features(date_col = \"request_datetime\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"correlations-between-predictors-and-target-variable","dir":"Articles","previous_headings":"","what":"Correlations between predictors and target variable","title":"03 - Data Understanding","text":"exploring correlations need transforming sampled data : Solving quality problems. Transforming categorical variables boolean ones. Transforming zone code factors. Adding new features.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"start_service-vs-end_service-zones","dir":"Articles","previous_headings":"","what":"start_service vs end_service zones","title":"03 - Data Understanding","text":"start_zone end_zone: data 55,559 rows relations columns, opted transform data way unique zone represent row reducing points plotted 238 following next steps: Summarizing total number trips starting point independently destination Summarizing total number trips ending point independently origin. Joining tables one. much simpler data work , easy confirm next linear regression start_trips end_trips almost values model slope one. means must cases someone takes taxi go place ’s really likely take another taxi back. Let’s now explore zones balance start_trips end_trips visited zoned Borough. , defined rate end_trips/start_trips highlight zones lower rate 15% percentile higher rate 85% percentile.  Based results, can highlight next points: airports present Queens, LaGuardia Airport JFK Airport, many trips going airport going airport. might happen due transportation options like taxis, shuttles, public transportation. remaining zones, Jackson Heights, East Village TriBeCa/Civic Center, residential zones variety public transportation options.","code":"# 1. Summarizing Staring Zones StartingZonesCount <-   TripsZoneDistribution[     !start_borough %chin% c(\"Staten Island\", \"Unknown\", \"EWR\") &       !end_borough %chin% c(\"Staten Island\", \"Unknown\", \"EWR\"),     .(start_trips = sum(n)),     by =  .(borough = start_borough,              zone = start_zone)   ]  # 2. Summarizing Ending Zones EndingZonesCount <-   TripsZoneDistribution[     !start_borough %chin% c(\"Staten Island\", \"Unknown\", \"EWR\") &       !end_borough %chin% c(\"Staten Island\", \"Unknown\", \"EWR\"),      .(end_trips = sum(n)),     by =  .(borough = end_borough,              zone = end_zone)   ]  # 3. Inner Joining Starting and Ending Zones Counts JoinedZonesCount <-   StartingZonesCount[     EndingZonesCount,     on = c(\"borough\", \"zone\"),     nomatch = 0   ] lm(end_trips ~ start_trips,     data = JoinedZonesCount) |>   summary() #>  #> Call: #> lm(formula = end_trips ~ start_trips, data = JoinedZonesCount) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -428723  -34008    9811   26938 1315702  #>  #> Coefficients: #>              Estimate Std. Error t value Pr(>|t|)     #> (Intercept) -2.27e+04   1.32e+04   -1.72    0.086 .   #> start_trips  1.03e+00   1.23e-02   83.47   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 127000 on 236 degrees of freedom #> Multiple R-squared:  0.967,  Adjusted R-squared:  0.967  #> F-statistic: 6.97e+03 on 1 and 236 DF,  p-value: <2e-16 # Creating dataset to plot ZonesCountToPlot <-   copy(JoinedZonesCount)[     j = `:=`(ending_starting_rate = end_trips/start_trips,              borough = fct_reorder(borough, -end_trips, .fun = sum, na.rm = TRUE),              end_m_trips = end_trips / 1e6L,              start_m_trips = start_trips / 1e6L)   ][, unbalance_situation := fcase(     ending_starting_rate < quantile(ending_starting_rate, 0.15),     \"More starts than ends\",     ending_starting_rate > quantile(ending_starting_rate, 0.85),     \"More ends than starts\",     default = \"Balanced\"   )   ][order(-(start_trips + end_trips)),      .SD[1:6],     by = \"borough\"]   # Creating the scatted plot ggplot(ZonesCountToPlot,        aes(start_m_trips, end_m_trips))+   geom_blank(aes(pmax(start_m_trips, end_m_trips),                  pmax(start_m_trips, end_m_trips)))+   geom_abline(linewidth = 0.8,               alpha = 0.5)+   geom_point(aes(color = borough),              size = 3.5,              alpha = 0.75)+   geom_text(data = ZonesCountToPlot[unbalance_situation ==                                       \"More starts than ends\"],             aes(label = zone),             size = 3.5,             hjust = -0.12,             check_overlap = TRUE)+   geom_text(data = ZonesCountToPlot[unbalance_situation ==                                       \"More ends than starts\"],             aes(label = zone),             size = 3.5,             hjust = 1.12,             check_overlap = TRUE)+   scale_x_continuous(labels = comma_format(accuracy = 0.1, suffix = \" M\"))+   scale_y_continuous(labels = comma_format(accuracy = 0.1, suffix = \" M\"))+   coord_equal() +   labs(title = \"Top 6 Most Important Zones by Borough\",        color = \"Borough\",        x = \"Number of Trips Starting\",        y = \"Number of Trips Ending\")+   theme_light()+   theme(legend.position = \"top\",         text = element_text(color = \"black\"),         plot.title = element_text(face = \"bold\"))"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Angel Feliz. Author, maintainer.            Personal Web, <https://angelfeliz.com/>","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Feliz (2024). project.nyc.taxi: Data Analysis Project NYC Taxi Drivers’ Earnings. https://angelfelizr.github.io/project.nyc.taxi/, https://github.com/AngelFelizR/project.nyc.taxi.","code":"@Manual{,   title = {project.nyc.taxi: A Data Analysis Project On NYC Taxi Drivers’ Earnings},   author = {Angel Feliz},   year = {2024},   note = {https://angelfelizr.github.io/project.nyc.taxi/, https://github.com/AngelFelizR/project.nyc.taxi}, }"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/index.html","id":"increasing-nyc-taxi-drivers-earnings","dir":"","previous_headings":"","what":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","title":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","text":"package, find tools needed reproduce analysis done project help taxi drivers NYC implement strategies can help increase earnings.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","text":"can install development version project.nyc.taxi like :","code":"pak::pak(\"AngelFelizR/project.nyc.taxi\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Add more features to explain a date — add_datetime_features","title":"Add more features to explain a date — add_datetime_features","text":"Add features explain date","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add more features to explain a date — add_datetime_features","text":"","code":"add_datetime_features(df, date_col)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add more features to explain a date — add_datetime_features","text":"df data.frame datetime column use. date_col string define column use","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add more features to explain a date — add_datetime_features","text":"data.frame new features.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add more features to explain a date — add_datetime_features","text":"","code":"data.frame(profit_rate = 15,            x = as.POSIXct(\"2024-05-18 08:00:15\"),            y = as.POSIXct(\"2024-07-04 08:00:15\")) |>   add_datetime_features(date_col = \"x\") |>   add_datetime_features(date_col = \"y\") #> # A tibble: 1 × 71 #>   x_sin.day x_cos.day x_sin.week x_cos.week x_sin.month x_cos.month x_dow x_doy #>       <dbl>     <dbl>      <dbl>      <dbl>       <dbl>       <dbl> <fct> <int> #> 1     0.865    -0.501     -0.563      0.826      -0.363      -0.932 Sat     139 #> # ℹ 63 more variables: x_week <int>, x_month <fct>, x_decimal <dbl>, #> #   x_quarter <int>, x_semester <int>, x_am <lgl>, x_hour <int>, #> #   x_hour12 <int>, x_decimal_day <dbl>, x_USCPulaskisBirthday <int>, #> #   x_USChristmasDay <int>, x_USColumbusDay <int>, #> #   x_USDecorationMemorialDay <int>, x_USElectionDay <int>, #> #   x_USGoodFriday <int>, x_USInaugurationDay <int>, x_USIndependenceDay <int>, #> #   x_USJuneteenthNationalIndependenceDay <int>, x_USLaborDay <int>, …"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame to show the zones — add_zone_description","title":"Create a data.frame to show the zones — add_zone_description","text":"translate start end ids detailed information.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame to show the zones — add_zone_description","text":"","code":"add_zone_description(   dt,   zone_dt,   start_id_col,   end_id_col,   zone_id_col,   keep_dt_id_cols = FALSE )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame to show the zones — add_zone_description","text":"dt Main data.table use. zone_dt data.table zones data dictionary. start_id_col string indicating id used starting point. end_id_col string indicating id used ending point. zone_id_col string indicating id related location zone_dt table. keep_dt_id_cols FALSE, columns indicated start_id_col end_id_col removed.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame to show the zones — add_zone_description","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame to show the zones — add_zone_description","text":"","code":"set.seed(123)  base_data <- data.table::data.table(   start_id = 1:5,   end_id = sample.int(5, 5),   value = seq(50, length.out = 5, by = 50) )  zone_description <- data.table::data.table(   id = 1:5,   City = LETTERS[1:5],   Zone = tail(LETTERS, 5L) )  add_zone_description(base_data,                      zone_description,                      start_id_col = \"start_id\",                      end_id_col = \"end_id\",                      zone_id_col = \"id\") #>    start_city start_zone end_city end_zone value #>        <char>     <char>   <char>   <char> <num> #> 1:          A          V        C        X    50 #> 2:          B          W        B        W   100 #> 3:          C          X        E        Z   150 #> 4:          D          Y        D        Y   200 #> 5:          E          Z        A        V   250"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the transformations based on initial EDA — apply_base_cleaning","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"Apply transformations based initial EDA","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"","code":"apply_base_cleaning(dt)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"dt data.table columns data translating code zone meaning.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"","code":"data.table::data.table(hvfhs_license_num = \"HV0004\",                        dispatching_base_num = \"HOLA\",                        originating_base_num = NA_character_,                        access_a_ride_flag = \"\",                             shared_request_flag = \"Y\",                        shared_match_flag = \"Y\",                        wav_request_flag = \"Y\",                        wav_match_flag = \"Y\",                        start_borough = \"Manhattan\",                        end_borough = \"Brooklyn\",                        start_service_zone = \"Boro Zone\",                        end_service_zone = \"Yellow Zone\",                        start_zone = \"1\",                        end_zone = \"2\",                        base_passenger_fare = 800,                        trip_miles = 250,                        request_datetime = as.POSIXct(\"2022-05-18 7:25:00\"),                         dropoff_datetime = as.POSIXct(\"2022-05-18 8:15:00\"),                        tips = 500,                        driver_pay = 800) |>   apply_base_cleaning() #>    company dispatching_base_num originating_base_num access_a_ride_flag #>     <fctr>               <fctr>               <fctr>             <fctr> #> 1:     Via                Other                Other            Missing #>    shared_request_flag shared_match_flag wav_request_flag wav_match_flag #>                 <fctr>            <fctr>           <fctr>         <fctr> #> 1:                   Y                 Y                Y              Y #>    start_borough end_borough same_borough start_service_zone end_service_zone #>           <fctr>      <fctr>       <lgcl>             <fctr>           <fctr> #> 1:     Manhattan    Brooklyn        FALSE          Boro Zone      Yellow Zone #>    same_service_zone start_zone end_zone same_zone    request_datetime #>               <lgcl>     <fctr>   <fctr>    <lgcl>              <POSc> #> 1:             FALSE          1        2     FALSE 2022-05-18 07:25:00 #>    base_passenger_fare trip_miles trip_minutes  tips driver_pay profit_rate #>                  <num>      <num>        <int> <num>      <num>       <num> #> 1:                  NA         NA           50   500         NA          NA"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"BaseLineSimulation — BaseLineSimulation","title":"BaseLineSimulation — BaseLineSimulation","text":"Trips returned running simulation.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BaseLineSimulation — BaseLineSimulation","text":"","code":"BaseLineSimulation"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BaseLineSimulation — BaseLineSimulation","text":"data frame 10 variables: simulation_day Sample date s_PULocationID TLC Taxi Zone trip began s_DOLocationID TLC Taxi Zone trip ended s_request_datetime Date time passenger requested picked s_dropoff_datetime date time trip drop-s_driver_pay Total driver pay (including tolls tips net commission, surcharges, taxes) s_tips Total amount tips received passenger PULocationID Start zone simulation day hours_to_work number hour work simulation day start_time Start date time simulation day","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BaseLineSimulation — BaseLineSimulation","text":"TLC Trip Record Data","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates all values need to describe — compute_boxplot","title":"Calculates all values need to describe — compute_boxplot","text":"Calculates values needed create boxplot.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates all values need to describe — compute_boxplot","text":"","code":"compute_boxplot(x, value)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates all values need to describe — compute_boxplot","text":"x data.frame arrow connection value column vector summarize","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates all values need to describe — compute_boxplot","text":"data.frame summary values","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates all values need to describe — compute_boxplot","text":"","code":"data.frame(x = rnorm(200, mean = 5)) |>   arrow::arrow_table() |>   compute_boxplot(x) #> Warning: quantile() currently returns an approximate quantile in Arrow #> This warning is displayed once per session. #> Warning: median() currently returns an approximate median in Arrow #> This warning is displayed once per session. #> # A tibble: 1 × 7 #>   min_value lower_whisker    q1    q2    q3 higher_whisker max_value #>       <dbl>         <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1      2.39          2.48  4.46  5.11  5.78           7.76      7.76"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates all values need to describe — compute_num_summary","title":"Calculates all values need to describe — compute_num_summary","text":"Calculates values needed create boxplot.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates all values need to describe — compute_num_summary","text":"","code":"compute_num_summary(x, value)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates all values need to describe — compute_num_summary","text":"x data.frame arrow connection value column vector summarize","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates all values need to describe — compute_num_summary","text":"data.frame summary values","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates all values need to describe — compute_num_summary","text":"","code":"data.frame(x = rnorm(200, mean = 5)) |>   arrow::arrow_table() |>   compute_num_summary(x) #> Warning: quantile() currently returns an approximate quantile in Arrow #> This warning is displayed once per session. #> Warning: median() currently returns an approximate median in Arrow #> This warning is displayed once per session. #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  1.00      1.77          2.22  4.30  4.93  5.02  5.69           7.77      7.53"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts rows based con columns provided — count_pct","title":"Counts rows based con columns provided — count_pct","text":"counts number rows unique value repeated columns selected arranging results descent order adds percentage column collecting results arrow.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts rows based con columns provided — count_pct","text":"","code":"count_pct(x, ..., wt = NULL, sort = TRUE, digits = 3L)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts rows based con columns provided — count_pct","text":"x lazy data frame arrow connection. ... Variables group wt variable, computes sum(wt) group. sort TRUE, show largest groups top. digits Integer indicating number decimal places","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts rows based con columns provided — count_pct","text":"data.frame","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts rows based con columns provided — count_pct","text":"","code":"set.seed(1234)  arrow_con <-    data.frame(char1 = sample(LETTERS[1:3], 100, replace = TRUE),              char2 = sample(LETTERS[4:6], 100, replace = TRUE)) |>   arrow::arrow_table()  # One var count_pct(arrow_con, char1) #>     char1     n   pct pct_cumulative #>    <char> <int> <num>          <num> #> 1:      B    40  0.40           0.40 #> 2:      C    31  0.31           0.71 #> 3:      A    29  0.29           1.00  # Two vars dt1 <-count_pct(arrow_con, char1, char2) dt1 #>     char1  char2     n   pct pct_cumulative #>    <char> <char> <int> <num>          <num> #> 1:      B      F    17  0.17           0.17 #> 2:      B      E    14  0.14           0.31 #> 3:      C      F    12  0.12           0.43 #> 4:      A      F    10  0.10           0.53 #> 5:      A      E    10  0.10           0.63 #> 6:      C      D    10  0.10           0.73 #> 7:      B      D     9  0.09           0.82 #> 8:      A      D     9  0.09           0.91 #> 9:      C      E     9  0.09           1.00  # You can use the wt function count_pct(dt1, char1, wt = n) #>     char1     n   pct pct_cumulative #>    <char> <int> <num>          <num> #> 1:      B    40  0.40           0.40 #> 2:      C    31  0.31           0.71 #> 3:      A    29  0.29           1.00"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform number into factors — factor_weekday","title":"Transform number into factors — factor_weekday","text":"Transform numeric vector factor level day week.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform number into factors — factor_weekday","text":"","code":"factor_weekday(x)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform number into factors — factor_weekday","text":"x numeric vector values 1 7","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform number into factors — factor_weekday","text":"factor vector","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform number into factors — factor_weekday","text":"","code":"factor_weekday(c(1,7,5)) #> [1] Mo Su Fr #> Levels: Mo Tu We Th Fr Sa Su"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse for arrow connections — fast_glimpse","title":"Glimpse for arrow connections — fast_glimpse","text":"Shows class related column without loading data memory.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse for arrow connections — fast_glimpse","text":"","code":"fast_glimpse(x)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse for arrow connections — fast_glimpse","text":"x arrow connection","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse for arrow connections — fast_glimpse","text":"schema related connection","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse for arrow connections — fast_glimpse","text":"","code":"df <- data.frame(num = runif(10),                  char = LETTERS[1:10],                  factor = factor(LETTERS[1:10], levels = LETTERS[1:10]),                  dates = seq(from = as.Date(\"2024-01-01\"),                               by = \"month\", length.out = 10))  arrow::arrow_table(df) |> fast_glimpse() #> FileSystemDataset (query) #> 10 rows x 4 columns #>"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame to show the zones — join_zones","title":"Create a data.frame to show the zones — join_zones","text":"creates start_borough, start_zone start_service_zone columns based PULocationID column end_borough, end_zone end_service_zone columns based DOLocationID column.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame to show the zones — join_zones","text":"","code":"join_zones(df, zone_tb)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame to show the zones — join_zones","text":"df data.frame code zones main data. zone_tb data.frame zones data dictionary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame to show the zones — join_zones","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an interactive map with colors — plot_map","title":"Creates an interactive map with colors — plot_map","text":"Creates interactive map colors","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an interactive map with colors — plot_map","text":"","code":"plot_map(   dt,   lng_var,   lat_var,   color = NULL,   color_var = NULL,   color_palette = NULL,   label_var = NULL,   map_provider = \"CartoDB\",   radius = 6,   radius_var = NULL,   cluster_points = FALSE )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an interactive map with colors — plot_map","text":"dt data.table points show. lng_var character vector indicating longitude dt. lat_var character vector indicating latitude dt. color character vector define custom color points. color_var character vector indicating categorical column dt. color_palette character selecting color use level. label_var character vector indicating categorical column dt information . map_provider character vector indicating radius double defining size circles plot. radius_var character vector indicating numeric column. cluster_points TRUE many points stop showing points showing sum sub-regions.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an interactive map with colors — plot_map","text":"interactive map","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an interactive map with colors — plot_map","text":"","code":"plot_map(   ZoneCodesArcgis,   lng_var = \"long\",   lat_var = \"lat\",   color_var = \"Borough\",   color_palette = c('Manhattan' = '#e41a1c',                     'Queens' = '#377eb8',                     'Brooklyn'= '#4daf4a'),   label_var = \"Zone\" )  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addCircleMarkers\",\"args\":[[40.61703,40.72599,40.77205,40.7763,40.75861,40.67302,40.60463,40.70444,40.71131,40.6339,40.77978,40.77731,40.67955071693,40.72304,40.60186,40.60186,40.76187,40.68372,40.63382,40.56478,40.71336,40.57795,40.60315,40.69535,40.678784667421,40.6629,40.692740347359,40.692740347359,40.69254,40.64364,40.6802,40.799418619169,40.799418619169,40.76748,40.71646,40.714099893777,40.68682,40.714099893777,40.68978,40.7841,40.684446717712,40.5755,40.74637,40.74637,40.666352822692,40.666352822692,40.67794,40.76863,40.69363,40.70198,40.62133,40.744915240463,40.76439,40.65379,40.65379,40.75566,40.815707125937,40.815707125937,40.66643,40.647533853812,40.72804,40.708,40.74361,40.74361,40.649654095456,40.60401,40.70906,40.70906,40.64031,40.74098,40.62114,40.76358,40.74612,40.72267,40.70344,40.69319,40.74162,40.7544,40.748,40.70141,40.70267,40.70267,40.70267,40.67236,40.73773520932,40.59757,40.659099,40.7304,40.711474728456,40.711474728456,40.82238,40.588138,40.84173,40.72696,40.7188,40.586449859123,40.65483,40.723440011834,40.86596,40.86987,40.7494,40.70179,40.71795,40.64459,40.64626,40.70865,40.73064,40.74213,40.77572,40.66692,40.821068764756,40.821068764756,40.773243152153,40.773243152153,40.71891,40.74829,40.745378,40.71693,40.683899997121,40.57737,40.808845814501,40.78343,40.87641,40.589547496498,40.61109,40.72729,40.73497,40.71238,40.7588,40.757375,40.80788,40.75422,40.62326,40.81053,40.74855,40.76583,40.75306,40.74905,40.583930001866,40.583930001866,40.77205,40.68012,40.67044,40.742685475578,40.65061,40.67747,40.66047,40.71481,40.74292,40.75647,40.795284230642,40.67502,40.73194,40.70055,40.70074,40.5799,40.76456,40.65954,40.69329,40.766414,40.707149992561,40.59094,40.7252,40.68094,40.67544,40.700050978728,40.758916614532,40.758916614532,40.65014,40.77376,40.734872337033,40.681979438148,40.74244,40.57832998949,40.57832998949,40.758012125134,40.756901597587,40.71337,40.71192,40.74919,40.73687,40.77062,40.77062,40.79251,40.79251,40.85546,40.84231,40.75431,40.73497,40.78863,40.786790508562,40.71478,40.698337835102,40.65397,40.69263,40.74696,40.70969,40.77808,40.77808],[-73.82461000000001,-73.98057,-73.92606000000001,-73.92361,-73.78574,-73.78543000000001,-74.00462,-74.01425,-74.0159,-74.0149,-73.77867999999999,-73.78068,-73.954254134186,-73.71545999999999,-73.9939,-73.9939,-73.96637,-73.98179,-73.99693000000001,-73.89296,-73.79886999999999,-73.9601,-73.8214,-73.99405,-73.94408377330601,-73.91728999999999,-73.923882116434,-73.923882116434,-73.73184999999999,-73.90069,-74.00163000000001,-73.95524522581501,-73.95524522581501,-73.97069,-73.99675999999999,-73.98715424302,-73.96469999999999,-73.98715424302,-73.99817,-73.84581,-74.002963871067,-73.97845,-73.85483000000001,-73.85483000000001,-73.952248666071,-73.952248666071,-73.89163000000001,-73.74733999999999,-73.98287999999999,-73.98282,-74.00995,-74.00248044924901,-73.87402,-73.93080999999999,-73.93080999999999,-73.81028000000001,-73.934448114471,-73.934448114471,-73.88269,-73.881531762325,-73.98499,-73.93989999999999,-73.88433000000001,-73.88433000000001,-73.952625064858,-73.75248999999999,-74.01061,-74.01061,-73.96183000000001,-73.98967,-73.93528000000001,-73.83004,-73.85279,-73.84791,-73.85041,-73.97168000000001,-73.78299,-73.99185,-73.71324,-73.88720000000001,-74.01424,-74.01424,-74.01424,-73.99027,-73.984524819086,-73.96541999999999,-73.996138,-73.95204,-74.01226522787201,-74.01226522787201,-73.94968,-73.81196300000001,-73.9355,-73.79832,-73.76465,-73.956891156328,-73.84602,-74.006164997819,-73.92610000000001,-73.92094,-73.88755999999999,-73.80853,-73.78269,-73.79436,-73.97108,-73.82890999999999,-73.82408,-73.97781000000001,-73.87452999999999,-73.75215,-73.93568412261899,-73.93568412261899,-73.98183992156299,-73.98183992156299,-73.99609,-73.9575,-73.932194,-73.98423,-73.95761500297,-73.94774,-73.954033071144,-73.96625,-73.911,-73.882072620519,-73.90957,-73.89543999999999,-74.00483,-73.8827,-73.97291,-73.96938299999999,-73.94542,-73.99245000000001,-73.95653,-73.96205999999999,-73.97605,-73.80842,-73.86118999999999,-73.75668,-73.966749978236,-73.966749978236,-73.92606000000001,-73.84735999999999,-73.98718,-73.989204217904,-73.95386999999999,-73.96583,-73.96278,-73.75076,-73.82061,-73.94729,-73.921313367379,-74.01023000000001,-73.86884000000001,-73.82805999999999,-73.89509,-73.83692000000001,-73.94732,-73.73994,-73.75644,-73.896908,-74.00452503655301,-73.94493,-74.00415,-73.79089,-73.81113999999999,-73.962456578249,-73.76222747739401,-73.76222747739401,-73.88444,-73.90494,-73.977029887165,-73.93184794067901,-73.92074,-74.011444968177,-74.011444968177,-73.960200066821,-73.990038822312,-74.0038,-73.99692,-73.96795,-73.98996,-73.95703,-73.95703,-73.97320000000001,-73.97320000000001,-73.93379,-73.93924,-74.00118999999999,-74.00483,-73.81373000000001,-73.792776615931,-73.95276,-73.962760026992,-73.97785,-73.86102,-73.90279,-74.01167,-73.9485,-73.9485],6,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#E41A1C\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#377EB8\",\"#E41A1C\",\"#4DAF4A\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\",\"#377EB8\",\"#377EB8\",\"#4DAF4A\",\"#4DAF4A\",\"#4DAF4A\",\"#377EB8\",\"#377EB8\",\"#E41A1C\",\"#E41A1C\",\"#E41A1C\"],\"fillOpacity\":0.2},null,null,null,null,[\"Jamaica Bay\",\"Alphabet City\",\"Astoria\",\"Astoria Park\",\"Auburndale\",\"Baisley Park\",\"Bath Beach\",\"Battery Park\",\"Battery Park City\",\"Bay Ridge\",\"Bay Terrace/Fort Totten\",\"Bayside\",\"Bedford\",\"Bellerose\",\"Bensonhurst East\",\"Bensonhurst West\",\"Bloomingdale\",\"Boerum Hill\",\"Borough Park\",\"Breezy Point/Fort Tilden/Riis Beach\",\"Briarwood/Jamaica Hills\",\"Brighton Beach\",\"Broad Channel\",\"Brooklyn Heights\",\"Brooklyn Navy Yard\",\"Brownsville\",\"Bushwick North\",\"Bushwick South\",\"Cambria Heights\",\"Canarsie\",\"Carroll Gardens\",\"Central Harlem\",\"Central Harlem North\",\"Central Park\",\"Chinatown\",\"Clinton East\",\"Clinton Hill\",\"Clinton West\",\"Cobble Hill\",\"College Point\",\"Columbia Street\",\"Coney Island\",\"Corona\",\"Corona\",\"Crown Heights North\",\"Crown Heights South\",\"Cypress Hills\",\"Douglaston\",\"Downtown Brooklyn/MetroTech\",\"DUMBO/Vinegar Hill\",\"Dyker Heights\",\"East Chelsea\",\"East Elmhurst\",\"East Flatbush/Farragut\",\"East Flatbush/Remsen Village\",\"East Flushing\",\"East Harlem North\",\"East Harlem South\",\"East New York\",\"East New York/Pennsylvania Avenue\",\"East Village\",\"East Williamsburg\",\"Elmhurst\",\"Elmhurst/Maspeth\",\"Erasmus\",\"Far Rockaway\",\"Financial District North\",\"Financial District South\",\"Flatbush/Ditmas Park\",\"Flatiron\",\"Flatlands\",\"Flushing\",\"Flushing Meadows-Corona Park\",\"Forest Hills\",\"Forest Park/Highland Park\",\"Fort Greene\",\"Fresh Meadows\",\"Garment District\",\"Glen Oaks\",\"Glendale\",\"Governor's Island/Ellis Island/Liberty Island\",\"Governor's Island/Ellis Island/Liberty Island\",\"Governor's Island/Ellis Island/Liberty Island\",\"Gowanus\",\"Gramercy\",\"Gravesend\",\"Green-Wood Cemetery\",\"Greenpoint\",\"Greenwich Village North\",\"Greenwich Village South\",\"Hamilton Heights\",\"Hammels/Arverne\",\"Highbridge Park\",\"Hillcrest/Pomonok\",\"Hollis\",\"Homecrest\",\"Howard Beach\",\"Hudson Sq\",\"Inwood\",\"Inwood Hill Park\",\"Jackson Heights\",\"Jamaica\",\"Jamaica Estates\",\"JFK Airport\",\"Kensington\",\"Kew Gardens\",\"Kew Gardens Hills\",\"Kips Bay\",\"LaGuardia Airport\",\"Laurelton\",\"Lenox Hill East\",\"Lenox Hill West\",\"Lincoln Square East\",\"Lincoln Square West\",\"Little Italy/NoLiTa\",\"Long Island City/Hunters Point\",\"Long Island City/Queens Plaza\",\"Lower East Side\",\"Madison\",\"Manhattan Beach\",\"Manhattan Valley\",\"Manhattanville\",\"Marble Hill\",\"Marine Park/Floyd Bennett Field\",\"Marine Park/Mill Basin\",\"Maspeth\",\"Meatpacking/West Village West\",\"Middle Village\",\"Midtown Center\",\"Midtown East\",\"Midtown North\",\"Midtown South\",\"Midwood\",\"Morningside Heights\",\"Murray Hill\",\"Murray Hill-Queens\",\"North Corona\",\"Oakland Gardens\",\"Ocean Hill\",\"Ocean Parkway South\",\"Old Astoria\",\"Ozone Park\",\"Park Slope\",\"Penn Station/Madison Sq West\",\"Prospect-Lefferts Gardens\",\"Prospect Heights\",\"Prospect Park\",\"Queens Village\",\"Queensboro Hill\",\"Queensbridge/Ravenswood\",\"Randalls Island\",\"Red Hook\",\"Rego Park\",\"Richmond Hill\",\"Ridgewood\",\"Rockaway Park\",\"Roosevelt Island\",\"Rosedale\",\"Saint Albans\",\"Saint Michaels Cemetery/Woodside\",\"Seaport\",\"Sheepshead Bay\",\"SoHo\",\"South Jamaica\",\"South Ozone Park\",\"South Williamsburg\",\"Springfield Gardens North\",\"Springfield Gardens South\",\"Starrett City\",\"Steinway\",\"Stuy Town/Peter Cooper Village\",\"Stuyvesant Heights\",\"Sunnyside\",\"Sunset Park East\",\"Sunset Park West\",\"Sutton Place/Turtle Bay North\",\"Times Sq/Theatre District\",\"TriBeCa/Civic Center\",\"Two Bridges/Seward Park\",\"UN/Turtle Bay South\",\"Union Sq\",\"Upper East Side North\",\"Upper East Side South\",\"Upper West Side North\",\"Upper West Side South\",\"Washington Heights North\",\"Washington Heights South\",\"West Chelsea/Hudson Yards\",\"West Village\",\"Whitestone\",\"Willets Point\",\"Williamsburg (North Side)\",\"Williamsburg (South Side)\",\"Windsor Terrace\",\"Woodhaven\",\"Woodside\",\"World Trade Center\",\"Yorkville East\",\"Yorkville West\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#4DAF4A\",\"#E41A1C\",\"#377EB8\"],\"labels\":[\"Brooklyn\",\"Manhattan\",\"Queens\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":0.5,\"position\":\"topleft\",\"type\":\"factor\",\"title\":null,\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"limits\":{\"lat\":[40.56478,40.87641],\"lng\":[-74.0159,-73.71324]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a sample from a parquet file — sample_parquet","title":"Take a sample from a parquet file — sample_parquet","text":"Take sample parquet file","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a sample from a parquet file — sample_parquet","text":"","code":"sample_parquet(file_path, valid_zones = NULL, prob = 0.05, seed = 1)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a sample from a parquet file — sample_parquet","text":"file_path character file name URI. valid_zones vector zones trips want sample . prob proportion rows keep sample. seed Number keep sample reprodicible.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a sample from a parquet file — sample_parquet","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a sample from a parquet file — sample_parquet","text":"","code":"df <- data.frame(x = 1:100) file_path <- tempfile(fileext = \".parquet\")  arrow::write_parquet(df, file_path)  sample_parquet(file_path) #>        x #>    <int> #> 1:    68 #> 2:    39 #> 3:     1 #> 4:    34 #> 5:    87"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display boxplot chart based of a summary. — show_boxplot","title":"Display boxplot chart based of a summary. — show_boxplot","text":"Display boxplot chart based summary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display boxplot chart based of a summary. — show_boxplot","text":"","code":"show_boxplot(x, y_title = \"\", y_break_width = 2)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display boxplot chart based of a summary. — show_boxplot","text":"x data.frame y_title character value indicating title describe y axis. y_break_width number define width related y axis.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display boxplot chart based of a summary. — show_boxplot","text":"ggplot","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates a day of work — simulate_trips","title":"Simulates a day of work — simulate_trips","text":"function sample data.frame arrow connection trips needed complete working day form taxi driver.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates a day of work — simulate_trips","text":"","code":"simulate_trips(   arrow_con,   start_datetime,   start_zone,   minutes_next_trip,   end_datetime,   valid_end_zones,   closest_zone,   borough_zones )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates a day of work — simulate_trips","text":"arrow_con data.frame arrow connection trips sample , columns described . start_datetime date associated time taxi driver start work start_zone number select starting zone minutes_next_trip integer define limit time needed extending filters end_datetime date associated time taxi driver stop looking new trips valid_end_zones vector number defining possible zones drive closest_zone named vector pointing closest zone taxi driver waiting need trip order start trip borough_zones data.frame integer column LocationID possible zone ids list column id_list contain zones ids related LocationID's borough","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates a day of work — simulate_trips","text":"data.frame","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulates a day of work — simulate_trips","text":"arrow_con must following columns","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates a day of work — simulate_trips","text":"","code":"# Defining some zone context valid_zones <- 1:3 closest_zones <- c(2L, 1L, 2L) names(closest_zones) <- valid_zones borough_zones <- data.frame(   LocationID = valid_zones,   id_list = I(list(valid_zones, valid_zones, valid_zones)) )  # Defining start point start_datetime <- lubridate::make_datetime(2023L, 5L, 18L, 8L) start_zone <- 1L  # Let's check trips from at 3 levels # 1. Starting in the same zone # 2. Starting in the closest zone # 3. Starting in the farthest zone valid_trips <- data.frame(   year = 2023L,   month = 5L,   PULocationID = c(1L, 2L, 3L),   DOLocationID = c(3L, 1L, 1L),   request_datetime = c(    start_datetime + lubridate::minutes(2L),    start_datetime + lubridate::minutes(20L + 7L),    start_datetime + lubridate::minutes(37L + 14L)   ),   dropoff_datetime = c(    start_datetime + lubridate::minutes(20L),    start_datetime + lubridate::minutes(37L),    lubridate::make_datetime(2023L, 5L, 18L, 9L, 1L)   ),   driver_pay = 10,   tips = 2  )  simulate_trips(valid_trips,                start_datetime = start_datetime,                start_zone = start_zone,                minutes_next_trip = 6L,                end_datetime = start_datetime + lubridate::hours(1L),                valid_end_zones = valid_zones,                closest_zone = closest_zones,                borough_zones = borough_zones) #>   s_PULocationID s_DOLocationID  s_request_datetime  s_dropoff_datetime #> 1              1              3 2023-05-18 08:02:00 2023-05-18 08:20:00 #> 2              2              1 2023-05-18 08:27:00 2023-05-18 08:37:00 #> 3              3              1 2023-05-18 08:51:00 2023-05-18 09:01:00 #>   s_driver_pay s_tips #> 1           10      2 #> 2           10      2 #> 3           10      2"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display boxplot chart based of a summary. — summary_to_boxplot","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"Display boxplot chart based summary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"","code":"summary_to_boxplot(x, y_title = \"\", y_break_width = 2)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"x data.frame y_title character value indicating title describe y axis. y_break_width number define width related y axis.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"ggplot","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":null,"dir":"Reference","previous_headings":"","what":"TrainingTrips — TrainingTrips","title":"TrainingTrips — TrainingTrips","text":"Random 5% sample taxi trips took place Manhattan, Brooklyn Queens 2022.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingTrips — TrainingTrips","text":"","code":"TrainingTrips"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TrainingTrips — TrainingTrips","text":"data.table variables original data.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TrainingTrips — TrainingTrips","text":"TLC Trip Record Data","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":null,"dir":"Reference","previous_headings":"","what":"ZoneCodesArcgis — ZoneCodesArcgis","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"Describe locations used main data.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"","code":"ZoneCodesArcgis"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"data frame 7 variables: LocationID unique id realted location Borough Borough location Zone Zone location service_zone Define zone type Address complete address location lat latitute estimation based Address long longitute estimation based Address","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"TLC Trip Record Data Arcgis","code":""}]

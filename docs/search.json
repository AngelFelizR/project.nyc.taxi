[{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"web-scraping","dir":"Articles","previous_headings":"","what":"Web Scraping","title":"Data Collection Process","text":"always updated list 2022 2023 links High Volume -Hire Vehicles documents let’s scrape TLC Trip Record Data using rvest library.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"downloading-source-page","dir":"Articles","previous_headings":"Web Scraping","what":"Downloading source page","title":"Data Collection Process","text":"","code":"SourcePage <-   rvest::read_html(\"https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"getting-links-for-taxi-trips","dir":"Articles","previous_headings":"Web Scraping","what":"Getting links for taxi trips","title":"Data Collection Process","text":"","code":"TripLinks <-   SourcePage |>   rvest::html_elements(xpath = '//div[@class=\"faq-answers\"]//li/a') |>   rvest::html_attr(\"href\") |>   grep(pattern = \"fhvhv_[a-z]+_202[23]-\\\\d{2}\\\\.parquet\", value = TRUE) |>   trimws() |>   sort()  FileNames <- basename(TripLinks)  FileNames #>  [1] \"fhvhv_tripdata_2022-01.parquet\" \"fhvhv_tripdata_2022-02.parquet\" #>  [3] \"fhvhv_tripdata_2022-03.parquet\" \"fhvhv_tripdata_2022-04.parquet\" #>  [5] \"fhvhv_tripdata_2022-05.parquet\" \"fhvhv_tripdata_2022-06.parquet\" #>  [7] \"fhvhv_tripdata_2022-07.parquet\" \"fhvhv_tripdata_2022-08.parquet\" #>  [9] \"fhvhv_tripdata_2022-09.parquet\" \"fhvhv_tripdata_2022-10.parquet\" #> [11] \"fhvhv_tripdata_2022-11.parquet\" \"fhvhv_tripdata_2022-12.parquet\" #> [13] \"fhvhv_tripdata_2023-01.parquet\" \"fhvhv_tripdata_2023-02.parquet\" #> [15] \"fhvhv_tripdata_2023-03.parquet\" \"fhvhv_tripdata_2023-04.parquet\" #> [17] \"fhvhv_tripdata_2023-05.parquet\" \"fhvhv_tripdata_2023-06.parquet\" #> [19] \"fhvhv_tripdata_2023-07.parquet\" \"fhvhv_tripdata_2023-08.parquet\" #> [21] \"fhvhv_tripdata_2023-09.parquet\" \"fhvhv_tripdata_2023-10.parquet\" #> [23] \"fhvhv_tripdata_2023-11.parquet\" \"fhvhv_tripdata_2023-12.parquet\""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"getting-link-for-trip-zones-","dir":"Articles","previous_headings":"Web Scraping","what":"Getting link for trip zones.","title":"Data Collection Process","text":"","code":"TaxiZoneLink <-   SourcePage |>   rvest::html_elements(xpath = '//ul/li/a[text()=\"Taxi Zone Lookup Table\"]')  |>   rvest::html_attr(\"href\") |>   trimws()  TaxiZoneLink #> [1] \"https://d37ci6vzurychx.cloudfront.net/misc/taxi_zone_lookup.csv\""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"saving-trips-data","dir":"Articles","previous_headings":"","what":"Saving trips data","title":"Data Collection Process","text":"take advantage best capacities Duckdb need save parquet file folder useful information filter later, one folder level related years next sub-folders related month parquet name part-0.parquet following process.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"defining-folder-paths","dir":"Articles","previous_headings":"Saving trips data","what":"Defining folder paths","title":"Data Collection Process","text":"","code":"SourcePath <- here::here()  RawDataPath <- file.path(SourcePath, \"raw-data\")  ParquetFolderPath <- file.path(RawDataPath, \"trip-data\")  YearFoldersPath <-    gsub(x = FileNames,        pattern = \"^fhvhv_tripdata_|-\\\\d{2}\\\\.parquet$\",        replacement = \"\") |>   paste0(\"year=\", a = _) |>   unique() |>   file.path(ParquetFolderPath, a = _)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"creating-folders-to-use","dir":"Articles","previous_headings":"Saving trips data","what":"Creating folders to use","title":"Data Collection Process","text":"","code":"for(paths in c(RawDataPath, ParquetFolderPath, YearFoldersPath)) {      if(!file.exists(paths)){     dir.create(paths)   }    }"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"defining-the-sub-folders-to-split-the-files-based-on-year-","dir":"Articles","previous_headings":"Saving trips data","what":"Defining the sub-folders to split the files based on year.","title":"Data Collection Process","text":"","code":"for(year_i in YearFoldersPath) dir.create(year_i, showWarnings = FALSE)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"creating-a-folder-for-each-month","dir":"Articles","previous_headings":"Saving trips data","what":"Creating a folder for each month","title":"Data Collection Process","text":"","code":"MonthFolders <- gsub(   x = FileNames,   pattern = \"^fhvhv_tripdata_\\\\d{4}-|\\\\.parquet$\",   replacement = \"\" ) |>   paste0(\"month=\", a = _)  MonthFoldersPath <- file.path(ParquetFolderPath, YearFolders, MonthFolders)  for(month_i in MonthFoldersPath) dir.create(month_i, showWarnings = FALSE)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"downloading-each-file-on-each-folder","dir":"Articles","previous_headings":"Saving trips data","what":"Downloading each file on each folder","title":"Data Collection Process","text":"","code":"# Parquet files might time a longer time to be downloaded options(timeout = 1800)   # Parquet trip data for(link_i in seq_along(TripLinks)){      download.file(TripLinks[link_i],                 destfile = file.path(MonthFoldersPath[link_i],\"part-0.parquet\"),                 mode = \"wb\")    }   # Taxi Zone CSV download.file(TaxiZoneLink,               destfile = file.path(RawDataPath,\"taxi_zone_lookup.csv\"),               mode = \"wb\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/01-data-collection-process.html","id":"saving-results-in-a-database","dir":"Articles","previous_headings":"","what":"Saving results in a database","title":"Data Collection Process","text":"Despite parquet files great sharing big data files keeping save format format, presents problems need apply sampling operations. work data large RAM, need create simple data base duckdb following next simple steps. Listing files read. Creating connection. Saving files database adding id differentiate trips adding performance per trips. Disconnecting data base. saving data data base can confirm final size.","code":"ParquetSource <-   list.files(ParquetFolderPath,              recursive = TRUE,              full.names = TRUE) |>   paste0(\"'\", a = _ ,\"'\") |>    paste0(collapse = \", \") |>   paste0(\"read_parquet([\", a = _ ,\"])\")  ParquetSource #> [1] \"read_parquet(['/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=01/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=02/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=03/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=04/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=05/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=06/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=07/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=08/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=09/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=10/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=11/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2022/month=12/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=01/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=02/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=03/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=04/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=05/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=06/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=07/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=08/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=09/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=10/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=11/part-0.parquet', '/home/rstudio/project.nyc.taxi/raw-data/trip-data/year=2023/month=12/part-0.parquet'])\" con <- DBI::dbConnect(duckdb::duckdb(),                        dbdir = here::here(\"my-db.duckdb\")) NycTripsCreateTable <- glue::glue_safe(\" CREATE TABLE NycTrips AS     SELECT          ROW_NUMBER() OVER () AS trip_id,         *,         (driver_pay + tips) / (EXTRACT(EPOCH FROM (dropoff_datetime - request_datetime)) / 3600) AS performance_per_hour     FROM {ParquetSource} \")  DBI::dbExecute(con, NycTripsCreateTable) DBI::dbDisconnect(con, shutdown = TRUE)  rm(con) here::here(\"my-db.duckdb\") |>   file.size() |>   structure(class = \"object_size\") |>   format(units = \"auto\") #> [1] \"36.4 Gb\""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-name","dir":"Articles","previous_headings":"","what":"Project Name","title":"Business Understanding","text":"Increasing NYC Taxi Drivers Earnings.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"problem-statement","dir":"Articles","previous_headings":"","what":"Problem Statement","title":"Business Understanding","text":"Taxi drivers increase earnings changing strategy select trips take, zone time start working.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-objective","dir":"Articles","previous_headings":"","what":"Project Objective","title":"Business Understanding","text":"Develop model increase NYC taxi drivers’ hourly earnings 20% optimal trip selection.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"project-scope","dir":"Articles","previous_headings":"","what":"Project Scope","title":"Business Understanding","text":"project limited Juno, Uber, Via Lyft taxi drivers work New York City trips take place zone Manhattan, Brooklyn Queens (active ones).","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"stakeholders","dir":"Articles","previous_headings":"","what":"Stakeholders","title":"Business Understanding","text":"Taxi drivers Taxi companies Customers NYC Taxi Limousine Commission","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"top-process-definition","dir":"Articles","previous_headings":"","what":"Top Process Definition","title":"Business Understanding","text":"elements process defined using SIPOC diagram.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"data-to-use","dir":"Articles","previous_headings":"","what":"Data to Use","title":"Business Understanding","text":"project, use subset data available TLC Trip Record Data 2022 2023 High Volume -Hire Vehicle columns described data dictionary. Based variables available, can divide 2 categories:","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"available-before-arriving-at-the-pick-up-location","dir":"Articles","previous_headings":"Data to Use","what":"Available Before Arriving at the Pick-Up Location","title":"Business Understanding","text":"used predictors train model can divided 2 groups: Fixed experiment can changed trip trip. hvfhs_license_num wav_match_flag Valid changing trip trip. request_datetime PULocationID DOLocationID airport_fee base_passenger_fare trip_miles shared_request_flag access_a_ride_flag wav_request_flag dispatching_base_num originating_base_num","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"available-after-ending-the-trip","dir":"Articles","previous_headings":"Data to Use","what":"Available After Ending the Trip","title":"Business Understanding","text":"can used create outcome variable needed predicted model. dropoff_datetime driver_pay tips on_scene_datetime pickup_datetime congestion_surcharge trip_time tolls bcf sales_tax shared_match_flag","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-business-metric","dir":"Articles","previous_headings":"","what":"Defining Business Metric","title":"Business Understanding","text":"Based current information, can say objective increase Daily Hourly Wage received taxi driver defined following formula: \\[ \\text{Daily Hourly Wage} = \\frac{\\text{Total Earnings}}{\\text{Total Hours Worked}} \\]","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-metrics-base-line","dir":"Articles","previous_headings":"","what":"Defining Metric’s Base Line","title":"Business Understanding","text":"Defining baseline based data challenge data doesn’t unique id make estimation, can run simulation estimate value confident interval. simulation based following assumptions related taxi drivers: can start work: zone Manhattan, Brooklyn Queens (active ones) month, weekday hour. TLC license number (taxi company) needs keep constant trips workday. wheelchair-accessible vehicles can accept trips request. estimate whether zone active taxis passengers assume always passengers taxis taxi driver can accept first requested trip. taxis find trips based time waiting take first trip valid radius: 0-1 Minute: Search within 1-mile radius. 1-3 Minutes: Expand search 3-mile radius trip found. 3-5 Minutes: Expand search 5-mile radius still trip found. Keep adding 2 miles every two minutes finding trip. 30 minutes break 4 hours working ending current trip. take last trip working 8 hours, without taking consideration 30 minutes break.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"running-trips-simulation","dir":"Articles","previous_headings":"Defining Metric’s Base Line","what":"Running trips simulation","title":"Business Understanding","text":"Loading functions use. Creating connection DuckDB. Importing definition code zone. saw need fix problems locations. Now can save results database. Creating saving temporal table listing possible combinations locations Manhattan, Brooklyn Queens (trips borough NYC) used filter. Selecting random first trip simulation. ’s important know even setting seed 3518 sample reproducible, saved data part package project, easy access running proyect.nyc.taxi::SimulationStartDay, creating trip_id column important. can also confirm sample satisfy initial restrictions: trips 2023. trips begin expected boroughs. trips end expected boroughs. Now can conclude initial data satisfy assumption 1. Calculating mean distance present one location fewer 10 miles. Running simulation.","code":"library(here) library(scales) library(ggplot2) library(data.table) library(lubridate) library(infer) library(DBI) library(duckdb) library(glue)  options(datatable.print.nrows = 15) con <- dbConnect(duckdb(), dbdir = here(\"my-db.duckdb\")) ZoneCodesRef <- fread(   here(\"raw-data/taxi_zone_lookup.csv\"),   colClasses = c(\"integer\",                  \"character\",                  \"character\",                  \"character\"),   data.table = TRUE,   key = \"Borough\" )[, Address := paste(Zone,                      Borough,                      \"New York\",                      \"United States\",                      sep = \", \") ][, tidygeocoder::geocode(.SD,                           address = Address,                           method = 'arcgis')]  setDT(ZoneCodesRef)  dbWriteTable(con, \"ZoneCodesRef\", ZoneCodesRef) BoroughColors <- c(   'Manhattan' = '#e41a1c',   'Queens' = '#377eb8',   'Brooklyn'= '#4daf4a',   'Bronx' = '#984ea3',   'Staten Island' = '#ff7f00',   'EWR' = '#a65628' )  plot_map(   ZoneCodesRef,   lng_var = \"long\",   lat_var = \"lat\",   color_var = \"Borough\",   color_palette = BoroughColors,   radius = 3,   label_var = \"Zone\" ) ZoneCodesRefClean <- copy(ZoneCodesRef)  # Corrected by looking the location on Google Maps ZoneCodesRefClean[Zone == \"Bloomingdale\",                   c(\"lat\", \"long\") := .(40.7987912430794,                                          -73.96978865023877)]  ZoneCodesRefClean[Zone == \"Newark Airport\",                   c(\"lat\", \"long\") := .(40.689499,                                         -74.174484)]  ZoneCodesRefClean[Zone == \"Governor's Island\",                    c(\"lat\", 'long') := .(40.68759208028148,                                         -74.02010657167092)]  ZoneCodesRefClean[Zone == \"Ellis Island\",                    c(\"lat\", 'long') := .(40.69930943708351,                                         -74.03975375195799)]  ZoneCodesRefClean[Zone == \"Liberty Island\",                    c(\"lat\", 'long') := .(40.689975518189954,                                         -74.04541235583368)]  # Consolidating Zone names with same locations ZoneCodesRefClean[, Zone := data.table::fcase(   LocationID %in% c(7L, 179L),   \"(Old) Astoria\",      LocationID %in% c(21L, 22L),   \"Bensonhurst (East|West)\",      LocationID %in% c(36L, 37L),   \"Bushwick (North|South)\",      LocationID %in% c(41L, 42L),   \"Central Harlem (North)\",      LocationID %in% c(48L, 50L),   \"Clinton (East|West)\",      LocationID %in% c(61L, 62L),   \"Crown Heights (North|South)\",      LocationID %in% c(71L, 72L),   \"East Flatbush (Farragut|Remsen Village)\",      LocationID %in% c(74L, 75L),   \"East Harlem (North|South)\",      LocationID %in% c(82L, 83L),   \"Elmhurst (Maspeth)\",      LocationID %in% c(87L, 88L),   \"Financial District (North|South)\",      LocationID %in% c(113L, 114L),   \"Greenwich Village (North|South)\",      LocationID %in% c(140L, 141L),   \"Lenox Hill (East|West)\",      LocationID %in% c(142L, 143L),   \"Lincoln Square (East|West)\",      LocationID %in% c(158L, 249L),   \"(Meatpacking) West Village\",      LocationID %in% c(177L, 178L),   \"Ocean (Hill|Parkway South)\",      LocationID %in% c(218L, 219L),   \"Springfield Gardens (North|South)\",      LocationID %in% c(227L, 228L),   \"Sunset Park (East|West)\",      LocationID %in% c(236L, 237L),   \"Upper East Side (North|South)\",      LocationID %in% c(238L, 239L),   \"Upper West Side (North|South)\",      LocationID %in% c(262L, 263L),   \"Yorkville (East|West)\",      LocationID %in% c(264L, 265L),   \"NA\",      rep(TRUE, times = .N),    Zone )]  plot_map(   ZoneCodesRefClean,   lng_var = \"long\",   lat_var = \"lat\",   color_var = \"Borough\",   color_palette = BoroughColors,   radius = 3,   label_var = \"Zone\" ) dbWriteTable(con, \"ZoneCodesRefClean\", ZoneCodesRefClean) ZoneCodesFilter <-   ZoneCodesRefClean[c(\"Manhattan\", \"Brooklyn\", \"Queens\"),                      on = \"Borough\",                     CJ(PULocationID = LocationID,                        DOLocationID = LocationID)]  dbWriteTable(con, \"ZoneCodesFilter\", ZoneCodesFilter) SimulationStartDayQuery <- \" SELECT t1.* FROM NycTrips t1 INNER JOIN ZoneCodesFilter t2   ON t1.PULocationID = t2.PULocationID AND      t1.DOLocationID = t2.DOLocationID WHERE t1.year = 2023 USING SAMPLE reservoir(60 ROWS) REPEATABLE (3518); \"  SimulationStartDay <- dbGetQuery(con, SimulationStartDayQuery)  setDT(SimulationStartDay)  pillar::glimpse(SimulationStartDay) #> Rows: 60 #> Columns: 28 #> $ trip_id              <dbl> 218799831, 260042034, 260089720, 295417701, 33294… #> $ hvfhs_license_num    <chr> \"HV0005\", \"HV0003\", \"HV0003\", \"HV0003\", \"HV0003\",… #> $ dispatching_base_num <chr> \"B03406\", \"B03404\", \"B03404\", \"B03404\", \"B03404\",… #> $ originating_base_num <chr> NA, \"B03404\", \"B03404\", \"B03404\", \"B03404\", \"B034… #> $ request_datetime     <dttm> 2023-01-12 20:14:29, 2023-03-17 18:50:16, 2023-0… #> $ on_scene_datetime    <dttm> NA, 2023-03-17 18:54:32, 2023-03-17 19:19:38, 20… #> $ pickup_datetime      <dttm> 2023-01-12 20:17:48, 2023-03-17 18:55:06, 2023-0… #> $ dropoff_datetime     <dttm> 2023-01-12 20:25:49, 2023-03-17 19:11:35, 2023-0… #> $ PULocationID         <dbl> 50, 80, 11, 112, 135, 76, 107, 230, 79, 210, 260,… #> $ DOLocationID         <dbl> 230, 17, 14, 37, 10, 63, 138, 246, 198, 61, 138, … #> $ trip_miles           <dbl> 0.993, 2.250, 4.520, 2.120, 5.370, 3.260, 9.740, … #> $ trip_time            <dbl> 481, 989, 1732, 670, 988, 1001, 1000, 894, 2900, … #> $ base_passenger_fare  <dbl> 8.26, 16.93, 24.00, 13.38, 20.57, 16.96, 29.59, 1… #> $ tolls                <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 6.94, 0.00, 0… #> $ bcf                  <dbl> 0.25, 0.51, 0.72, 0.40, 0.57, 0.47, 1.07, 0.35, 1… #> $ sales_tax            <dbl> 0.73, 1.50, 2.13, 1.19, 1.83, 1.51, 3.46, 1.13, 3… #> $ congestion_surcharge <dbl> 2.75, 0.00, 0.00, 0.00, 0.00, 0.00, 2.75, 2.75, 2… #> $ airport_fee          <dbl> 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 2.50, 0.00, 0… #> $ tips                 <dbl> 0.00, 0.00, 0.00, 0.00, 3.44, 0.00, 0.00, 0.00, 1… #> $ driver_pay           <dbl> 5.47, 13.32, 22.22, 9.09, 16.41, 13.69, 22.25, 10… #> $ shared_request_flag  <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",… #> $ shared_match_flag    <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",… #> $ access_a_ride_flag   <chr> \"N\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \"N\",… #> $ wav_request_flag     <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",… #> $ wav_match_flag       <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\",… #> $ month                <chr> \"01\", \"03\", \"03\", \"05\", \"07\", \"08\", \"09\", \"10\", \"… #> $ year                 <dbl> 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2023, 2… #> $ performance_per_hour <dbl> 28.95882, 37.49179, 43.00645, 31.16571, 65.74057,… SimulationStartDay[, .N, year] #>     year     N #>    <num> <int> #> 1:  2023    60 ZoneCodesRefClean[SimulationStartDay,                    on = c(\"LocationID\" = \"PULocationID\"),                   .N,                   by = \"Borough\"] #>      Borough     N #>       <char> <int> #> 1: Manhattan    25 #> 2:  Brooklyn    22 #> 3:    Queens    13 ZoneCodesRefClean[SimulationStartDay,                    on = c(\"LocationID\" = \"DOLocationID\"),                   .N,                   by = \"Borough\"] #>      Borough     N #>       <char> <int> #> 1: Manhattan    24 #> 2:  Brooklyn    17 #> 3:    Queens    19 MeanDistanceQuery <- \" CREATE TABLE PointMeanDistance AS  -- Selecting all avaiable from trips that don't start and end at same point WITH ListOfPoints AS (   SELECT      t1.PULocationID,     t1.DOLocationID,     AVG(t1.trip_miles) AS trip_miles_mean   FROM      NycTrips t1   INNER JOIN     ZoneCodesFilter t2     ON t1.PULocationID = t2.PULocationID AND        t1.DOLocationID = t2.DOLocationID   WHERE     t1.PULocationID <> t1.DOLocationID AND     t1.year = 2023   GROUP BY      t1.PULocationID,      t1.DOLocationID   HAVING      AVG(t1.trip_miles) <= 7 ),  -- Defining all available distances ListOfPointsComplete AS (   SELECT     PULocationID,     DOLocationID,     trip_miles_mean   FROM ListOfPoints   UNION ALL   SELECT     DOLocationID AS PULocationID,     PULocationID AS DOLocationID,     trip_miles_mean   FROM ListOfPoints ), NumeredRows AS (   SELECT     PULocationID,     DOLocationID,     trip_miles_mean,     row_number() OVER (PARTITION BY PULocationID, DOLocationID) AS n_row   FROM ListOfPointsComplete )  -- Selecting the first combination of distances SELECT    PULocationID,   DOLocationID,   trip_miles_mean FROM NumeredRows WHERE n_row = 1 ORDER BY PULocationID, trip_miles_mean; \"  dbExecute(con, MeanDistanceQuery)  dbListTables(con) SimulationHourlyWage <- simulate_trips(con, SimulationStartDay)  DailyHourlyWage <-   SimulationHourlyWage[, .(`Daily Hourly Wage` =                               sum(sim_driver_pay + sim_tips) /                              as.double(difftime(max(sim_dropoff_datetime),                                                  min(sim_request_datetime),                                                 units = \"hours\"))),                        by = \"simulation_id\"]   DailyHourlyWage |>   ggplot()+   geom_histogram(aes(`Daily Hourly Wage`),                  bins = 10) +   scale_x_continuous(breaks = breaks_width(10)) +   theme_light()"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-a-condifence-interval","dir":"Articles","previous_headings":"Defining Metric’s Base Line","what":"Defining a Condifence Interval","title":"Business Understanding","text":"simulating 60 days, can use bootstrap infer distribution mean Daily Hourly Wage day year following next steps. Resample replacement new 60 days hourly wage 3,000 times calculate mean resample. Compute 95% confident interval. Visualize estimated distribution.","code":"set.seed(1586)  BootstrapHourlyWage <-   specify(DailyHourlyWage,           `Daily Hourly Wage` ~ NULL) |>   generate(reps = 3000, type = \"bootstrap\") |>   calculate(stat = \"mean\")  BootstrapHourlyWage #> Response: Daily Hourly Wage (numeric) #> # A tibble: 3,000 × 2 #>    replicate  stat #>        <int> <dbl> #>  1         1  44.9 #>  2         2  44.6 #>  3         3  46.9 #>  4         4  46.7 #>  5         5  45.9 #>  6         6  46.7 #>  7         7  47.0 #>  8         8  48.7 #>  9         9  46.4 #> 10        10  47.2 #> # ℹ 2,990 more rows BootstrapInterval <-    get_ci(BootstrapHourlyWage,           level = 0.95,          type = \"percentile\")  BootstrapInterval #> # A tibble: 1 × 2 #>   lower_ci upper_ci #>      <dbl>    <dbl> #> 1     44.3     50.7 visualize(BootstrapHourlyWage)+   shade_ci(endpoints = BootstrapInterval,            color = \"#2c77BF\",            fill = \"#2c77BF\")+   annotate(geom = \"text\",            y = 400,            x = c(BootstrapInterval[1L][[1L]] - 0.4,                  BootstrapInterval[2L][[1L]] + 0.4),            label = unlist(BootstrapInterval) |> comma(accuracy = 0.01))+   labs(title = \"Mean Hourly Wage Distribution\",        y = \"Count\")+   theme_light()+   theme(panel.grid.minor.y = element_blank(),         panel.grid.major.y = element_blank(),         plot.title = element_text(face = \"bold\"),         axis.title.x = element_blank())"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"business-case","dir":"Articles","previous_headings":"","what":"Business Case","title":"Business Understanding","text":"Based simulation’s results can confirm average earnings taxi driver per hour goes 44.32 50.63, doesn’t represent highest values observed simulation. can check simulation results can confirm 10% simulated days presented earnings 60 dollars per hour. can apply strategy can move Daily Hourly Wage 60 dollars per hour ($ = 20% $) woud great change many taxi driver apply strategy.","code":"DailyHourlyWage$`Daily Hourly Wage` |>    quantile(probs = 0.9) #>      90%  #> 60.95187"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"ethical-considerations","dir":"Articles","previous_headings":"","what":"Ethical Considerations","title":"Business Understanding","text":"project aims increase taxi driver earnings, ’s important acknowledge optimizing driver profits significant downsides: Reduced service quality: Drivers focusing solely maximizing earnings may avoid less profitable areas times, potentially leaving passengers underserved. Discrimination risks: earnings-focused strategy inadvertently lead discriminatory practices certain demographics neighborhoods perceived less profitable. Increased congestion: Drivers congregating high-profit areas worsen traffic already busy parts city. conclusion, project created show abilities Data Scientist, project implemented due considerations.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"defining-outcome-to-predict","dir":"Articles","previous_headings":"","what":"Defining Outcome to Predict","title":"Business Understanding","text":"taxi driver can take 2 decisions working increase earnings: start working. Accept reject individual trip request. address first decision, need explore factors can improve performance_per_hour trip. address second question, need create variable best_trip_20_m shows 1 current trip best take following 20 minutes.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/02-business-understanding.html","id":"deliverables","dir":"Articles","previous_headings":"","what":"Deliverables","title":"Business Understanding","text":"HTML presentation, explaining best places times start working taxi drivers increase earnings. Shiny app assists drivers reject o accept trips increase earnings.","code":""},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"loading-packages-to-use","dir":"Articles","previous_headings":"Setting the environment up","what":"Loading packages to use","title":"Data Understanding","text":"","code":"## Custom functions library('project.nyc.taxi')  ## To manage relative paths library(here)  ## To transform data larger than RAM library(DBI) library(duckdb)  ## To transform data that fits in RAM library(data.table) library(lubridate)  ## To create plots library(ggplot2) library(scales)  ## Defining the print params to use in the report options(datatable.print.nrows = 15, digits = 4)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"creating-db-connections","dir":"Articles","previous_headings":"Setting the environment up","what":"Creating DB connections","title":"Data Understanding","text":"","code":"con <- dbConnect(duckdb(), dbdir = here(\"my-db.duckdb\"))  dbListTables(conn = con) #> [1] \"NycTrips\"          \"PointMeanDistance\" \"ZoneCodesFilter\"   #> [4] \"ZoneCodesRef\"      \"ZoneCodesRefClean\""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/articles/03-data-understanding.html","id":"defining-testing-data","dir":"Articles","previous_headings":"Setting the environment up","what":"Defining testing data","title":"Data Understanding","text":"saving sample DB, need create function.","code":"TrainingSampleQuery <- \" SELECT t1.* FROM NycTrips t1 INNER JOIN ZoneCodesFilter t2   ON t1.PULocationID = t2.PULocationID AND      t1.DOLocationID = t2.DOLocationID WHERE t1.year = 2022 USING SAMPLE 1% (system, 547548); \"  TrainingSample <- dbGetQuery(con, TrainingSampleQuery)  setDT(TrainingSample) is_best_trip_20_min <- function() 5"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Angel Feliz. Author, maintainer.            Personal Web, <https://angelfeliz.com/>","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Feliz (2024). project.nyc.taxi: Data Analysis Project NYC Taxi Drivers’ Earnings. R package version 0.0.0.9000,  https://github.com/AngelFelizR/project.nyc.taxi, https://angelfelizr.github.io/project.nyc.taxi/.","code":"@Manual{,   title = {project.nyc.taxi: A Data Analysis Project On NYC Taxi Drivers’ Earnings},   author = {Angel Feliz},   year = {2024},   note = {R package version 0.0.0.9000,  https://github.com/AngelFelizR/project.nyc.taxi},   url = {https://angelfelizr.github.io/project.nyc.taxi/}, }"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/index.html","id":"increasing-nyc-taxi-drivers-earnings-","dir":"","previous_headings":"","what":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","title":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","text":"package, find tools needed reproduce analysis done project help taxi drivers NYC implement strategies can help increase earnings.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Data Analysis Project On NYC Taxi Drivers’ Earnings","text":"can install development version project.nyc.taxi like :","code":"pak::pak(\"AngelFelizR/project.nyc.taxi\")"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"BaseLineSimulation — BaseLineSimulation","title":"BaseLineSimulation — BaseLineSimulation","text":"Trips returned running simulation.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BaseLineSimulation — BaseLineSimulation","text":"","code":"BaseLineSimulation"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BaseLineSimulation — BaseLineSimulation","text":"data frame 10 variables: simulation_day Sample date s_PULocationID TLC Taxi Zone trip began s_DOLocationID TLC Taxi Zone trip ended s_request_datetime Date time passenger requested picked s_dropoff_datetime date time trip drop-s_driver_pay Total driver pay (including tolls tips net commission, surcharges, taxes) s_tips Total amount tips received passenger PULocationID Start zone simulation day hours_to_work number hour work simulation day start_time Start date time simulation day","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/BaseLineSimulation.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"BaseLineSimulation — BaseLineSimulation","text":"TLC Trip Record Data","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/SimulationStartDay.html","id":null,"dir":"Reference","previous_headings":"","what":"Defines the start point for each day to simulate. — SimulationStartDay","title":"Defines the start point for each day to simulate. — SimulationStartDay","text":"table random sample trips 2023, generated using reservoir method duckdb seed 3518, described vignette(\"02-business-understanding\").","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/SimulationStartDay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defines the start point for each day to simulate. — SimulationStartDay","text":"","code":"SimulationStartDay"},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/SimulationStartDay.html","id":"simulationstartday","dir":"Reference","previous_headings":"","what":"SimulationStartDay","title":"Defines the start point for each day to simulate. — SimulationStartDay","text":"data frame 60 rows 22 columns: trip_id unique indentifier trip. hvfhs_license_num TLC license number HVFHS base business. See Details. dispatching_base_num TLC Base License Number base dispatched trip. originating_base_num Base number base received original trip request. request_datetime Date/time passenger requested picked . on_scene_datetime Date/time driver arrived pick-location (Accessible Vehicles-). pickup_datetime date time trip pick-. dropoff_datetime date time trip drop-. PULocationID TLC Taxi Zone trip began. DOLocationID TLC Taxi Zone trip ended. trip_miles Total miles passenger trip. trip_time Total time seconds passenger trip. base_passenger_fare Base passenger fare tolls, tips, taxes, fees. tolls Total amount tolls paid trip. bcf Total amount collected trip Black Car Fund. sales_tax Total amount collected trip NYS sales tax. congestion_surcharge Total amount collected trip NYS congestion surcharge. airport_fee $2.50 drop pick LaGuardia, Newark, John F. Kennedy airports. tips Total amount tips received passenger. driver_pay Total driver pay (including tolls tips net commission, surcharges, taxes). shared_request_flag passenger agree shared/pooled ride? (Y/N) shared_match_flag passenger share vehicle another passenger? (Y/N) access_a_ride_flag trip administered behalf Metropolitan Transportation Authority (MTA)? (Y/N) wav_request_flag passenger request wheelchair-accessible vehicle (WAV)? (Y/N) wav_match_flag trip occur wheelchair-accessible vehicle (WAV)? (Y/N) performance_per_hour Represent return taken hour","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/SimulationStartDay.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Defines the start point for each day to simulate. — SimulationStartDay","text":"https://www.nyc.gov/site/tlc//tlc-trip-record-data.page","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":null,"dir":"Reference","previous_headings":"","what":"TrainingTrips — TrainingTrips","title":"TrainingTrips — TrainingTrips","text":"Random 5% sample taxi trips took place Manhattan, Brooklyn Queens 2022.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TrainingTrips — TrainingTrips","text":"","code":"TrainingTrips"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TrainingTrips — TrainingTrips","text":"data.table variables original data.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/TrainingTrips.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"TrainingTrips — TrainingTrips","text":"TLC Trip Record Data","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":null,"dir":"Reference","previous_headings":"","what":"ZoneCodesArcgis — ZoneCodesArcgis","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"Describe locations used main data.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"","code":"ZoneCodesArcgis"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"data frame 7 variables: LocationID unique id realted location Borough Borough location Zone Zone location service_zone Define zone type Address complete address location lat latitute estimation based Address long longitute estimation based Address","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/ZoneCodesArcgis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ZoneCodesArcgis — ZoneCodesArcgis","text":"TLC Trip Record Data Arcgis","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":null,"dir":"Reference","previous_headings":"","what":"Add more features to explain a date — add_datetime_features","title":"Add more features to explain a date — add_datetime_features","text":"Add features explain date","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add more features to explain a date — add_datetime_features","text":"","code":"add_datetime_features(df, date_col)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add more features to explain a date — add_datetime_features","text":"df data.frame datetime column use. date_col string define column use","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add more features to explain a date — add_datetime_features","text":"data.frame new features.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_datetime_features.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add more features to explain a date — add_datetime_features","text":"","code":"data.frame(profit_rate = 15,            x = as.POSIXct(\"2024-05-18 08:00:15\"),            y = as.POSIXct(\"2024-07-04 08:00:15\")) |>   add_datetime_features(date_col = \"x\") |>   add_datetime_features(date_col = \"y\") #> # A tibble: 1 × 71 #>   x_sin.day x_cos.day x_sin.week x_cos.week x_sin.month x_cos.month x_dow x_doy #>       <dbl>     <dbl>      <dbl>      <dbl>       <dbl>       <dbl> <fct> <int> #> 1     0.865    -0.501     -0.563      0.826      -0.363      -0.932 Sat     139 #> # ℹ 63 more variables: x_week <int>, x_month <fct>, x_decimal <dbl>, #> #   x_quarter <int>, x_semester <int>, x_am <lgl>, x_hour <int>, #> #   x_hour12 <int>, x_decimal_day <dbl>, x_USCPulaskisBirthday <int>, #> #   x_USChristmasDay <int>, x_USColumbusDay <int>, #> #   x_USDecorationMemorialDay <int>, x_USElectionDay <int>, #> #   x_USGoodFriday <int>, x_USInaugurationDay <int>, x_USIndependenceDay <int>, #> #   x_USJuneteenthNationalIndependenceDay <int>, x_USLaborDay <int>, …"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame to show the zones — add_zone_description","title":"Create a data.frame to show the zones — add_zone_description","text":"translate start end ids detailed information.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame to show the zones — add_zone_description","text":"","code":"add_zone_description(   dt,   zone_dt,   start_id_col,   end_id_col,   zone_id_col,   keep_dt_id_cols = FALSE )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame to show the zones — add_zone_description","text":"dt Main data.table use. zone_dt data.table zones data dictionary. start_id_col string indicating id used starting point. end_id_col string indicating id used ending point. zone_id_col string indicating id related location zone_dt table. keep_dt_id_cols FALSE, columns indicated start_id_col end_id_col removed.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame to show the zones — add_zone_description","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/add_zone_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame to show the zones — add_zone_description","text":"","code":"set.seed(123)  base_data <- data.table::data.table(   start_id = 1:5,   end_id = sample.int(5, 5),   value = seq(50, length.out = 5, by = 50) )  zone_description <- data.table::data.table(   id = 1:5,   City = LETTERS[1:5],   Zone = tail(LETTERS, 5L) )  add_zone_description(base_data,                      zone_description,                      start_id_col = \"start_id\",                      end_id_col = \"end_id\",                      zone_id_col = \"id\") #>    start_city start_zone end_city end_zone value #>        <char>     <char>   <char>   <char> <num> #> 1:          A          V        C        X    50 #> 2:          B          W        B        W   100 #> 3:          C          X        E        Z   150 #> 4:          D          Y        D        Y   200 #> 5:          E          Z        A        V   250"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the transformations based on initial EDA — apply_base_cleaning","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"Apply transformations based initial EDA","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"","code":"apply_base_cleaning(dt)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"dt data.table columns data translating code zone meaning.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/apply_base_cleaning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the transformations based on initial EDA — apply_base_cleaning","text":"","code":"data.table::data.table(hvfhs_license_num = \"HV0004\",                        dispatching_base_num = \"HOLA\",                        originating_base_num = NA_character_,                        access_a_ride_flag = \"\",                             shared_request_flag = \"Y\",                        shared_match_flag = \"Y\",                        wav_request_flag = \"Y\",                        wav_match_flag = \"Y\",                        start_borough = \"Manhattan\",                        end_borough = \"Brooklyn\",                        start_service_zone = \"Boro Zone\",                        end_service_zone = \"Yellow Zone\",                        start_zone = \"1\",                        end_zone = \"2\",                        base_passenger_fare = 800,                        trip_miles = 250,                        request_datetime = as.POSIXct(\"2022-05-18 7:25:00\"),                         dropoff_datetime = as.POSIXct(\"2022-05-18 8:15:00\"),                        tips = 500,                        driver_pay = 800) |>   apply_base_cleaning() #>    company dispatching_base_num originating_base_num access_a_ride_flag #>     <fctr>               <fctr>               <fctr>             <fctr> #> 1:     Via                Other                Other            Missing #>    shared_request_flag shared_match_flag wav_request_flag wav_match_flag #>                 <fctr>            <fctr>           <fctr>         <fctr> #> 1:                   Y                 Y                Y              Y #>    start_borough end_borough start_service_zone end_service_zone same_borough #>           <fctr>      <fctr>             <fctr>           <fctr>       <lgcl> #> 1:     Manhattan    Brooklyn          Boro Zone      Yellow Zone        FALSE #>    same_service_zone same_zone base_passenger_fare trip_miles #>               <lgcl>    <lgcl>               <num>      <num> #> 1:             FALSE     FALSE                 800        250 #>       request_datetime    dropoff_datetime trip_minutes  tips driver_pay #>                 <POSc>              <POSc>        <int> <num>      <num> #> 1: 2022-05-18 07:25:00 2022-05-18 08:15:00           50   500        800 #>    profit_rate #>          <num> #> 1:        1560"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/clean_zone_manually.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean zone errors — clean_zone_manually","title":"Clean zone errors — clean_zone_manually","text":"purpose function correcting wrong locations like happened : Newark Airport Governor's Island Ellis Island Liberty Island update zone name name location avoid point overlapping.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/clean_zone_manually.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean zone errors — clean_zone_manually","text":"","code":"clean_zone_manually(dt)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/clean_zone_manually.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean zone errors — clean_zone_manually","text":"dt data.table columns lat, long, LocationID Zone.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/clean_zone_manually.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean zone errors — clean_zone_manually","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates all values need to describe — compute_boxplot","title":"Calculates all values need to describe — compute_boxplot","text":"Calculates values needed create boxplot.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates all values need to describe — compute_boxplot","text":"","code":"compute_boxplot(x, value)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates all values need to describe — compute_boxplot","text":"x data.frame arrow connection value column vector summarize","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates all values need to describe — compute_boxplot","text":"data.frame summary values","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates all values need to describe — compute_boxplot","text":"","code":"data.frame(x = rnorm(200, mean = 5)) |>   arrow::arrow_table() |>   compute_boxplot(x) #> Warning: quantile() currently returns an approximate quantile in Arrow #> This warning is displayed once per session. #> Warning: median() currently returns an approximate median in Arrow #> This warning is displayed once per session. #> # A tibble: 1 × 7 #>   min_value lower_whisker    q1    q2    q3 higher_whisker max_value #>       <dbl>         <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1      2.39          2.48  4.46  5.11  5.78           7.76      7.76"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates all values need to describe — compute_num_summary","title":"Calculates all values need to describe — compute_num_summary","text":"Calculates values needed create boxplot.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates all values need to describe — compute_num_summary","text":"","code":"compute_num_summary(x, value)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates all values need to describe — compute_num_summary","text":"x data.frame arrow connection value column vector summarize","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates all values need to describe — compute_num_summary","text":"data.frame summary values","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/compute_num_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates all values need to describe — compute_num_summary","text":"","code":"data.frame(x = rnorm(200, mean = 5)) |>   arrow::arrow_table() |>   compute_num_summary(x) #> Warning: quantile() currently returns an approximate quantile in Arrow #> This warning is displayed once per session. #> Warning: median() currently returns an approximate median in Arrow #> This warning is displayed once per session. #> # A tibble: 1 × 9 #>      sd min_value lower_whisker    q1    q2  mean    q3 higher_whisker max_value #>   <dbl>     <dbl>         <dbl> <dbl> <dbl> <dbl> <dbl>          <dbl>     <dbl> #> 1  1.00      1.77          2.22  4.30  4.93  5.02  5.69           7.77      7.53"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts rows based con columns provided — count_pct","title":"Counts rows based con columns provided — count_pct","text":"counts number rows unique value repeated columns selected arranging results descent order adds percentage column collecting results arrow.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts rows based con columns provided — count_pct","text":"","code":"count_pct(x, ..., wt = NULL, sort = TRUE, digits = 3L)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts rows based con columns provided — count_pct","text":"x lazy data frame arrow connection. ... Variables group wt variable, computes sum(wt) group. sort TRUE, show largest groups top. digits Integer indicating number decimal places","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts rows based con columns provided — count_pct","text":"data.frame","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/count_pct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts rows based con columns provided — count_pct","text":"","code":"set.seed(1234)  arrow_con <-    data.frame(char1 = sample(LETTERS[1:3], 100, replace = TRUE),              char2 = sample(LETTERS[4:6], 100, replace = TRUE)) |>   arrow::arrow_table()  # One var count_pct(arrow_con, char1) #>     char1     n   pct pct_cumulative #>    <char> <int> <num>          <num> #> 1:      B    40  0.40           0.40 #> 2:      C    31  0.31           0.71 #> 3:      A    29  0.29           1.00  # Two vars dt1 <-count_pct(arrow_con, char1, char2) dt1 #>     char1  char2     n   pct pct_cumulative #>    <char> <char> <int> <num>          <num> #> 1:      B      F    17  0.17           0.17 #> 2:      B      E    14  0.14           0.31 #> 3:      C      F    12  0.12           0.43 #> 4:      A      F    10  0.10           0.53 #> 5:      A      E    10  0.10           0.63 #> 6:      C      D    10  0.10           0.73 #> 7:      B      D     9  0.09           0.82 #> 8:      A      D     9  0.09           0.91 #> 9:      C      E     9  0.09           1.00  # You can use the wt function count_pct(dt1, char1, wt = n) #>     char1     n   pct pct_cumulative #>    <char> <int> <num>          <num> #> 1:      B    40  0.40           0.40 #> 2:      C    31  0.31           0.71 #> 3:      A    29  0.29           1.00"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform number into factors — factor_weekday","title":"Transform number into factors — factor_weekday","text":"Transform numeric vector factor level day week.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform number into factors — factor_weekday","text":"","code":"factor_weekday(x)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform number into factors — factor_weekday","text":"x numeric vector values 1 7","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform number into factors — factor_weekday","text":"factor vector","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/factor_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform number into factors — factor_weekday","text":"","code":"factor_weekday(c(1,7,5)) #> [1] Mo Su Fr #> Levels: Mo Tu We Th Fr Sa Su"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":null,"dir":"Reference","previous_headings":"","what":"Glimpse for arrow connections — fast_glimpse","title":"Glimpse for arrow connections — fast_glimpse","text":"Shows class related column without loading data memory.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glimpse for arrow connections — fast_glimpse","text":"","code":"fast_glimpse(x)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glimpse for arrow connections — fast_glimpse","text":"x arrow connection","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glimpse for arrow connections — fast_glimpse","text":"schema related connection","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/fast_glimpse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glimpse for arrow connections — fast_glimpse","text":"","code":"df <- data.frame(num = runif(10),                  char = LETTERS[1:10],                  factor = factor(LETTERS[1:10], levels = LETTERS[1:10]),                  dates = seq(from = as.Date(\"2024-01-01\"),                               by = \"month\", length.out = 10))  arrow::arrow_table(df) |> fast_glimpse() #> FileSystemDataset (query) #> 10 rows x 4 columns #>"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/highlight_top_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight the most repeated zones in a Borough — highlight_top_zones","title":"Highlight the most repeated zones in a Borough — highlight_top_zones","text":"Highlight repeated zones Borough","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/highlight_top_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight the most repeated zones in a Borough — highlight_top_zones","text":"","code":"highlight_top_zones(   dt,   borough,   borough_color = \"blue\",   top_color = \"red\",   top_length = 5L,   borough_col = \"borough\",   col_prefix = NULL,   zone_col = \"zone\",   long_col = \"long\",   lat_col = \"lat\" )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/highlight_top_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight the most repeated zones in a Borough — highlight_top_zones","text":"dt data.table data use . borough Defines borough focus attention. borough_color Defines base color points show. top_color Defines color use top points. top_length Defines number points highlight. borough_col Name Borough column filter. col_prefix Update following column's names prefix. zone_col Name column zone name. long_col Name column zone long. lat_col Name column zone lat.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/highlight_top_zones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight the most repeated zones in a Borough — highlight_top_zones","text":"leaflet map","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame to show the zones — join_zones","title":"Create a data.frame to show the zones — join_zones","text":"creates start_borough, start_zone start_service_zone columns based PULocationID column end_borough, end_zone end_service_zone columns based DOLocationID column.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame to show the zones — join_zones","text":"","code":"join_zones(df, zone_tb)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame to show the zones — join_zones","text":"df data.frame code zones main data. zone_tb data.frame zones data dictionary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/join_zones.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame to show the zones — join_zones","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an interactive map with colors — plot_map","title":"Creates an interactive map with colors — plot_map","text":"Creates interactive map colors","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an interactive map with colors — plot_map","text":"","code":"plot_map(   dt,   lng_var,   lat_var,   color = NULL,   color_var = NULL,   color_palette = NULL,   label_var = NULL,   map_provider = \"CartoDB\",   radius = 6,   radius_var = NULL,   cluster_points = FALSE )"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an interactive map with colors — plot_map","text":"dt data.table points show. lng_var character vector indicating longitude dt. lat_var character vector indicating latitude dt. color character vector define custom color points. color_var character vector indicating categorical column dt. color_palette character selecting color use level. label_var character vector indicating categorical column dt information . map_provider character vector indicating radius double defining size circles plot. radius_var character vector indicating numeric column. cluster_points TRUE many points stop showing points showing sum sub-regions.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an interactive map with colors — plot_map","text":"interactive map","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/plot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates an interactive map with colors — plot_map","text":"","code":"dt = data.table::data.table(   Borough = c(\"Queens\", \"Manhattan\", \"Brooklyn\"),   Zone = c(\"Steinway\", \"Highbridge Park\", \"Canarsie\"),   lat = c(40.77376, 40.84173, 40.64364),   long = c(-73.90494, -73.9355, -73.90069) )  plot_map(   dt,   lng_var = \"long\",   lat_var = \"lat\",   color_var = \"Borough\",   color_palette = c('Manhattan' = '#e41a1c',                     'Queens' = '#377eb8',                     'Brooklyn'= '#4daf4a'),   label_var = \"Zone\" )  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]},{\"method\":\"addCircleMarkers\",\"args\":[[40.77376,40.84173,40.64364],[-73.90494,-73.9355,-73.90069],6,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":[\"#377EB8\",\"#E41A1C\",\"#4DAF4A\"],\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"#377EB8\",\"#E41A1C\",\"#4DAF4A\"],\"fillOpacity\":0.2},null,null,null,null,[\"Steinway\",\"Highbridge Park\",\"Canarsie\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#4DAF4A\",\"#E41A1C\",\"#377EB8\"],\"labels\":[\"Brooklyn\",\"Manhattan\",\"Queens\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":0.5,\"position\":\"topleft\",\"type\":\"factor\",\"title\":null,\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":null}]}],\"limits\":{\"lat\":[40.64364,40.84173],\"lng\":[-73.9355,-73.90069]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/project.nyc.taxi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"project.nyc.taxi: A Data Analysis Project On NYC Taxi Drivers’ Earnings — project.nyc.taxi-package","title":"project.nyc.taxi: A Data Analysis Project On NYC Taxi Drivers’ Earnings — project.nyc.taxi-package","text":"package, find tools needed reproduce analysis done project help taxi drivers NYC implement strategies can help increase earnings.","code":""},{"path":[]},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/project.nyc.taxi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"project.nyc.taxi: A Data Analysis Project On NYC Taxi Drivers’ Earnings — project.nyc.taxi-package","text":"Maintainer: Angel Feliz angel.esteban.feliz@gmail.com (Personal Web, <https://angelfeliz.com/>)","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":null,"dir":"Reference","previous_headings":"","what":"Take a sample from a parquet file — sample_parquet","title":"Take a sample from a parquet file — sample_parquet","text":"Take sample parquet file","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take a sample from a parquet file — sample_parquet","text":"","code":"sample_parquet(file_path, valid_zones = NULL, prob = 0.05, seed = 1)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take a sample from a parquet file — sample_parquet","text":"file_path character file name URI. valid_zones vector zones trips want sample . prob proportion rows keep sample. seed Number keep sample reprodicible.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take a sample from a parquet file — sample_parquet","text":"data.table","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/sample_parquet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take a sample from a parquet file — sample_parquet","text":"","code":"df <- data.frame(x = 1:100) file_path <- tempfile(fileext = \".parquet\")  arrow::write_parquet(df, file_path)  sample_parquet(file_path) #>        x #>    <int> #> 1:    68 #> 2:    39 #> 3:     1 #> 4:    34 #> 5:    87"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display boxplot chart based of a summary. — show_boxplot","title":"Display boxplot chart based of a summary. — show_boxplot","text":"Display boxplot chart based summary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display boxplot chart based of a summary. — show_boxplot","text":"","code":"show_boxplot(x, y_title = \"\", y_break_width = 2)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display boxplot chart based of a summary. — show_boxplot","text":"x data.frame y_title character value indicating title describe y axis. y_break_width number define width related y axis.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/show_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display boxplot chart based of a summary. — show_boxplot","text":"ggplot","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a date of work for a single taxi driver. — simulate_trips","title":"Simulate a date of work for a single taxi driver. — simulate_trips","text":"Simulate date work single taxi driver.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a date of work for a single taxi driver. — simulate_trips","text":"","code":"simulate_trips(conn, start_points, model = NULL)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a date of work for a single taxi driver. — simulate_trips","text":"conn Duckdb connection NycTrips PointMeanDistance tables. start_points data.table initial trips simulation. model tidymodels workflow.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/simulate_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a date of work for a single taxi driver. — simulate_trips","text":"data.table.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Display boxplot chart based of a summary. — summary_to_boxplot","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"Display boxplot chart based summary.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"","code":"summary_to_boxplot(x, y_title = \"\", y_break_width = 2)"},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"x data.frame y_title character value indicating title describe y axis. y_break_width number define width related y axis.","code":""},{"path":"https://angelfelizr.github.io/project.nyc.taxi/reference/summary_to_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display boxplot chart based of a summary. — summary_to_boxplot","text":"ggplot","code":""}]
